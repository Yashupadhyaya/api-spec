{
  "item": [
    {
      "id": "7e79a882-218b-44cd-b86c-ad596e6ee6fc",
      "name": "pet",
      "item": [
        {
          "id": "a5400686-5f02-47e3-96c4-ede9fe285647",
          "name": "Add a new pet to the store",
          "request": {
            "name": "Add a new pet to the store",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"photoUrls\": [\n        \"{{0}}\",\n        \"{{1}}\"\n    ],\n    \"id\": \"{{id}}\",\n    \"category\": {\n        \"id\": \"{{id}}\",\n        \"name\": \"{{name}}\"\n    },\n    \"tags\": [\n        {\n            \"id\": \"{{id}}\",\n            \"name\": \"{{name}}\"\n        },\n        {\n            \"id\": \"{{id}}\",\n            \"name\": \"{{name}}\"\n        }\n    ],\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "de36c196-e137-4c5e-acb9-ab46941f83e4",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "c04922c8-efab-44e2-abf9-17bb275bdbf5",
          "name": "Update an existing pet",
          "request": {
            "name": "Update an existing pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"photoUrls\": [\n        \"{{0}}\",\n        \"{{1}}\"\n    ],\n    \"id\": \"{{id}}\",\n    \"category\": {\n        \"id\": \"{{id}}\",\n        \"name\": \"{{name}}\"\n    },\n    \"tags\": [\n        {\n            \"id\": \"{{id}}\",\n            \"name\": \"{{name}}\"\n        },\n        {\n            \"id\": \"{{id}}\",\n            \"name\": \"{{name}}\"\n        }\n    ],\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "0c665db7-2e81-47ca-b041-b26537806061",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "9166e0d9-a6d0-48b5-b7b0-7b5272005c4b",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "05d52aab-8774-4413-a5be-bb27eee096a8",
              "name": "Validation exception",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet for http method type put in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Pet not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Validation exception\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b7994a22-c5c4-407a-a177-237709cecf48",
          "name": "Finds Pets by status",
          "request": {
            "name": "Finds Pets by status",
            "description": {
              "content": "Multiple status values can be provided with comma separated strings",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "status",
                  "value": "{{status}}",
                  "description": "Status values that need to be considered for filter"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            }
          },
          "response": [
            {
              "id": "c4ba635b-ce07-44db-9c20-bed6529e22cf",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4e746701-06cc-47a9-85ad-a6addfaf2f32",
              "name": "Invalid status value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet/findByStatus?status=available for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid status value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1e916cd2-b318-44de-be7c-7804cf463ffe",
          "name": "Finds Pets by tags",
          "request": {
            "name": "Finds Pets by tags",
            "description": {
              "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByTags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}",
                  "description": "Tags to filter by"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}",
                  "description": "Tags to filter by"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            }
          },
          "response": [
            {
              "id": "2e06ad0f-3904-48d0-b286-945635567ae9",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "723556d9-547f-497d-aefa-35fb7a3ed20c",
              "name": "Invalid tag value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet/findByTags?tags=<string>&tags=<string> for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid tag value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "87b659a9-df53-43e3-b3ae-49ace5bcb0ed",
          "name": "{petId}",
          "item": [
            {
              "id": "54a4568f-3a72-490a-b7fa-599bc80fa72a",
              "name": "Find pet by ID",
              "request": {
                "name": "Find pet by ID",
                "description": {
                  "content": "Returns a single pet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet to return"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "api_key"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "04f28ca5-8b5d-4eb6-99b6-3b6d361579d6",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "709e44ef-7e2a-4438-8830-270010a92b13",
                  "name": "Invalid ID supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "473640a4-9cbc-4ed0-884e-e31076a64490",
                  "name": "Pet not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet/:petId for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `category.id` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"category.id\")){\n            if(responseData.category.id!=null){\n              pm.expect(typeof _.get(responseData, \"category.id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `category.name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"category.name\")){\n          if(responseData.category.name!=null){\n            pm.expect(typeof _.get(responseData, \"category.name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `photoUrls` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"photoUrls\")){\n            if(responseData.photoUrls!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"photoUrls\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n      \n        pm.test('Response has the `tags` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"tags\")){\n            if(responseData.tags!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"tags\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `tags` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"tags\");  \n          let tagsArray = _.get(pm.response.json(), \"tags\", \"\");  \n          for (let i = 0; i < tagsArray.length; i++) {  \n            \t\n        pm.test(`${i} element of array 'tags' has 'id' as number`,function(){  \n          if(pm.expect(pm.response.json().tags[i]).to.have.nested.property(\"id\")){\n            if(pm.response.json().tags[i].id != null ){\n              pm.expect(typeof _.get(pm.response.json(),`tags[${i}].id`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'tags' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().tags[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().tags[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`tags[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('`status` to be one of enum',function(){ \n          pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.include.oneOf(\"available,pending,sold\");\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Pet not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fc26cdf1-cba7-4874-8405-1264607cad9b",
              "name": "Updates a pet in the store with form data",
              "request": {
                "name": "Updates a pet in the store with form data",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet that needs to be updated"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "http://petstore.swagger.io/api/oauth/dialog"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                },
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Updated name of the pet"
                    },
                    {
                      "disabled": false,
                      "key": "status",
                      "value": "{{status}}",
                      "description": "Updated status of the pet"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "861c793d-adca-40db-8e0c-7e9eb211021e",
                  "name": "Invalid input",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet that needs to be updated"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "disabled": false,
                          "description": {
                            "content": "Updated name of the pet",
                            "type": "text/plain"
                          },
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "disabled": false,
                          "description": {
                            "content": "Updated status of the pet",
                            "type": "text/plain"
                          },
                          "key": "status",
                          "value": "{{status}}"
                        }
                      ]
                    }
                  },
                  "status": "Method Not Allowed",
                  "code": 405,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet/:petId for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b487e4ac-591f-4d31-91f0-92c28e230e0b",
              "name": "Deletes a pet",
              "request": {
                "name": "Deletes a pet",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) Pet id to delete"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "key": "api_key",
                    "value": "{{api_key}}",
                    "description": ""
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "http://petstore.swagger.io/api/oauth/dialog"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "279b54db-b316-437b-8143-b0ae4ac72265",
                  "name": "Invalid pet value",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) Pet id to delete"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "key": "api_key",
                        "value": "{{api_key}}",
                        "description": ""
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet/:petId for http method type delete in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid pet value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a83f31e3-4caf-4a45-9616-b0fdd411d2d2",
              "name": "uploads an image",
              "request": {
                "name": "uploads an image",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId",
                    "uploadImage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet to update"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "http://petstore.swagger.io/api/oauth/dialog"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                },
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "additionalMetadata",
                      "value": "{{additionalMetadata}}",
                      "type": "text",
                      "description": "Additional data to pass to server"
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "description": "file to upload"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "f3b80516-c40e-49e9-8ceb-da437a369357",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId",
                        "uploadImage"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to update"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "description": {
                            "content": "Additional data to pass to server",
                            "type": "text/plain"
                          },
                          "key": "additionalMetadata",
                          "value": "{{additionalMetadata}}",
                          "type": "text"
                        },
                        {
                          "description": {
                            "content": "file to upload",
                            "type": "text/plain"
                          },
                          "key": "file",
                          "value": "{{file}}",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"code\": -10897880,\n  \"type\": \"ea reprehenderit deserunt\",\n  \"message\": \"amet reprehenderit sed \"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /pet/:petId/uploadImage for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "2af03bc8-d781-4214-b4d3-c8e047bd2f82",
      "name": "store",
      "item": [
        {
          "id": "867ba73e-e82b-4dbd-9131-aff39c303663",
          "name": "Returns pet inventories by status",
          "request": {
            "name": "Returns pet inventories by status",
            "description": {
              "content": "Returns a map of status codes to quantities",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "inventory"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "api_key"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "4360ff53-a73a-421f-862e-352e1056725f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "inventory"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"ipsum_7\": -98147512\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /store/inventory for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1937cbf9-f4c3-4466-a1db-27e5d13d6708",
          "name": "order",
          "item": [
            {
              "id": "95c92a78-fb51-4e14-b7cf-1d81a58f8e4a",
              "name": "Place an order for a pet",
              "request": {
                "name": "Place an order for a pet",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{id}}\",\n    \"petId\": \"{{petId}}\",\n    \"quantity\": \"{{quantity}}\",\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{status}}\",\n    \"complete\": \"{{complete}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "b8cdd9c3-5333-413d-a890-0c21cdc97afd",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "store",
                        "order"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"petId\": \"{{petId}}\",\n    \"quantity\": \"{{quantity}}\",\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{status}}\",\n    \"complete\": \"{{complete}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"<string>\",\n  \"complete\": \"<boolean>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "949d0f85-1690-44a4-9e4f-d4558c6314e9",
                  "name": "Invalid Order",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "store",
                        "order"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"petId\": \"{{petId}}\",\n    \"quantity\": \"{{quantity}}\",\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{status}}\",\n    \"complete\": \"{{complete}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /store/order for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `petId` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"petId\")){\n            if(responseData.petId!=null){\n              pm.expect(typeof _.get(responseData, \"petId\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `quantity` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"quantity\")){\n            if(responseData.quantity!=null){\n              pm.expect(typeof _.get(responseData, \"quantity\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `shipDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"shipDate\")){\n          if(responseData.shipDate!=null){\n            pm.expect(typeof _.get(responseData, \"shipDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('`shipDate` format to be date-time',function(){\n                pm.expect(_.get(pm.response.json(), \"shipDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('`status` to be one of enum',function(){ \n          pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.include.oneOf(\"placed,approved,delivered\");\n        })\n\n      pm.test('Response has the `complete` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"complete\")){\n          if(responseData.complete!=null){\n            pm.expect(typeof _.get(responseData, \"complete\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid Order\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "2e5e987d-ee12-4082-9838-b6400067273d",
              "name": "{orderId}",
              "item": [
                {
                  "id": "cb629cb5-7d21-434f-9a78-9ffca0ab599a",
                  "name": "Find purchase order by ID",
                  "request": {
                    "name": "Find purchase order by ID",
                    "description": {
                      "content": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "store",
                        "order",
                        ":orderId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{orderId}}",
                          "key": "orderId",
                          "description": "(Required) ID of pet that needs to be fetched"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "030cc678-d363-41bc-a995-bc44ed064dd4",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of pet that needs to be fetched"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/xml"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"<string>\",\n  \"complete\": \"<boolean>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "d45588f1-5164-4f84-8e3d-91d3fbf48c9c",
                      "name": "Invalid ID supplied",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of pet that needs to be fetched"
                            }
                          ]
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "8a7d9b5c-19d8-4c5e-8874-f530aa01a0df",
                      "name": "Order not found",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of pet that needs to be fetched"
                            }
                          ]
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /store/order/:orderId for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `petId` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"petId\")){\n            if(responseData.petId!=null){\n              pm.expect(typeof _.get(responseData, \"petId\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `quantity` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"quantity\")){\n            if(responseData.quantity!=null){\n              pm.expect(typeof _.get(responseData, \"quantity\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `shipDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"shipDate\")){\n          if(responseData.shipDate!=null){\n            pm.expect(typeof _.get(responseData, \"shipDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('`shipDate` format to be date-time',function(){\n                pm.expect(_.get(pm.response.json(), \"shipDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('`status` to be one of enum',function(){ \n          pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.include.oneOf(\"placed,approved,delivered\");\n        })\n\n      pm.test('Response has the `complete` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"complete\")){\n          if(responseData.complete!=null){\n            pm.expect(typeof _.get(responseData, \"complete\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Order not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "46f8fd64-7db1-4604-b3d9-561fa573de2d",
                  "name": "Delete purchase order by ID",
                  "request": {
                    "name": "Delete purchase order by ID",
                    "description": {
                      "content": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "store",
                        "order",
                        ":orderId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{orderId}}",
                          "key": "orderId",
                          "description": "(Required) ID of the order that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "c8efa8e7-a84e-4d44-a8bc-e99c810530af",
                      "name": "Invalid ID supplied",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of the order that needs to be deleted"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "9b0afbb4-a431-42c3-88e8-3b6eaf0f48c2",
                      "name": "Order not found",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of the order that needs to be deleted"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /store/order/:orderId for http method type delete in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Order not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "1f7f2007-8050-4c0e-98e2-03e2d7732a38",
      "name": "user",
      "item": [
        {
          "id": "d88b86f3-d5cf-474c-979b-6303483bc380",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "88a04b1b-9154-4dfe-8de2-9a158c4911a2",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8272d22e-0f1b-40a7-bddb-881bb790d528",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithArray"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    },\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "13bcf7ad-cd70-4121-8750-1910b58d0697",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithArray"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/createWithArray for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "558a5a3b-9824-4bb0-8abe-686d601eb1c2",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithList"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    },\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "48cb60fb-f8ee-4b61-a2b5-e0f4f49e2919",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithList"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/createWithList for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "65cf4389-f5ff-4fd4-b963-ef9ee988e1b9",
          "name": "Logs user into the system",
          "request": {
            "name": "Logs user into the system",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "username",
                  "value": "{{username}}",
                  "description": "The user name for login"
                },
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "The password for login in clear text"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "256d3581-6a01-4370-a285-30a537759d0e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "calls per hour allowed by the user",
                  "key": "X-Rate-Limit",
                  "value": "{{X-Rate-Limit}}"
                },
                {
                  "disabled": false,
                  "description": "date in UTC when toekn expires",
                  "key": "X-Expires-After",
                  "value": "{{X-Expires-After}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "\"enim\"",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7f25cdbe-15df-42e9-a2fd-a9f168ca7616",
              "name": "Invalid username/password supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/login?username=<string>&password=<string> for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username/password supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8557c92f-b545-40db-9106-42aab8116f86",
          "name": "Logs out current logged in user session",
          "request": {
            "name": "Logs out current logged in user session",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "90c8ae01-7e74-4e21-8704-d890dd8cb8d4",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/logout for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d0987733-6eb0-49f8-a9f4-a4527ade2bb8",
          "name": "{username}",
          "item": [
            {
              "id": "b1a12846-5b2c-4e03-91b3-59e69d0eebc6",
              "name": "Get user by user name",
              "request": {
                "name": "Get user by user name",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "73f00957-ed54-494d-8161-84c03ce9e7b8",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "94b02a8d-5c85-421d-9893-0406b0acd929",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "87f5cf20-e997-4323-85fb-af8d9f0fc9dd",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/:username for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `username` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"username\")){\n          if(responseData.username!=null){\n            pm.expect(typeof _.get(responseData, \"username\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `password` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"password\")){\n          if(responseData.password!=null){\n            pm.expect(typeof _.get(responseData, \"password\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `userStatus` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"userStatus\")){\n            if(responseData.userStatus!=null){\n              pm.expect(typeof _.get(responseData, \"userStatus\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d7db8648-9aca-45be-9c92-28efc85e3379",
              "name": "Updated user",
              "request": {
                "name": "Updated user",
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) name that need to be deleted"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "cead0d70-acec-43d2-8e08-09dcc0f76cd3",
                  "name": "Invalid user supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) name that need to be deleted"
                        }
                      ]
                    },
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "f62b4032-422a-4ad2-a6e1-a26c425fe1c9",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) name that need to be deleted"
                        }
                      ]
                    },
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/:username for http method type put in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid user supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "3cd03499-a370-443c-806d-8f6ebd9172b1",
              "name": "Delete user",
              "request": {
                "name": "Delete user",
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) The name that needs to be deleted"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "3aa4f40f-9687-4a2f-98dd-97b7f8ae1221",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "ff2e6d61-afae-4189-9d02-75500f89daeb",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test petstore-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /user/:username for http method type delete in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/v2",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "6c592b7f-acfa-4f6d-8248-45ec2820a3cb",
    "name": "Swagger Petstore YAML",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters\n\nContact Support:\n Email: apiteam@swagger.io",
      "type": "text/plain"
    }
  }
}