{
  "item": [
    {
      "id": "2e660163-b365-45b5-8dfb-b59861b9eedb",
      "name": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
      "request": {
        "name": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
        "description": {
          "content": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "nobelPrizes"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "offset",
              "value": "{{offset}}",
              "description": "The number of items to skip before starting to collect the result set"
            },
            {
              "disabled": false,
              "key": "limit",
              "value": "{{limit}}",
              "description": "The numbers of items to return"
            },
            {
              "disabled": false,
              "key": "sort",
              "value": "{{sort}}",
              "description": "The sort order (result is sorted by year)"
            },
            {
              "disabled": false,
              "key": "nobelPrizeYear",
              "value": "{{nobelPrizeYear}}",
              "description": "Year the Nobel Prize was awarded, in the form of YYYY"
            },
            {
              "disabled": false,
              "key": "yearTo",
              "value": "{{yearTo}}",
              "description": "Used in combination with nobelPrizeYear to specify a range of years to return results from. NobelPrizeYear is required"
            },
            {
              "disabled": false,
              "key": "nobelPrizeCategory",
              "value": "{{nobelPrizeCategory}}",
              "description": "Nobel Prize category"
            },
            {
              "disabled": false,
              "key": "format",
              "value": "{{format}}",
              "description": "Format of output (Default = json)"
            },
            {
              "disabled": false,
              "key": "csvLang",
              "value": "{{csvLang}}",
              "description": "Language of output if format is csv (Default = en)"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "ac807975-d6a3-4a75-aa41-01b69b7d241a",
          "name": "Successful call of Nobel Prize(s) according to the filled fields",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"nobelPrizes\": [\n    {\n      \"awardYear\": 1989,\n      \"category\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"categoryFullName\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"dateAwarded\": \"2015-11-12\",\n      \"prizeAmount\": 1000000,\n      \"prizeAmountAdjusted\": 1000000,\n      \"topMotivation\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"laureates\": [\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"awardYear\": 1989,\n      \"category\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"categoryFullName\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"dateAwarded\": \"2015-11-12\",\n      \"prizeAmount\": 1000000,\n      \"prizeAmountAdjusted\": 1000000,\n      \"topMotivation\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"laureates\": [\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"meta\": {\n    \"offset\": 20165873,\n    \"limit\": 14820513,\n    \"nobelPrizeYear\": 56216772,\n    \"yearTo\": 51802469,\n    \"nobelPrizeCategory\": \"eco\",\n    \"count\": 41545546\n  },\n  \"links\": [\n    {\n      \"first\": \"aute ad irure sed\",\n      \"prev\": \"nostrud occaecat off\",\n      \"self\": \"qui labore sed dolor\",\n      \"next\": \"occaecat L\",\n      \"last\": \"veniam irure\"\n    },\n    {\n      \"first\": \"ea\",\n      \"prev\": \"magna amet laboris\",\n      \"self\": \"laboris dolore\",\n      \"next\": \"aliqua enim sint cillum\",\n      \"last\": \"en\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "8c23acda-69f1-404f-b551-87685cfca9f9",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c65c4235-663d-4e70-8550-d4eec399d6a7",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c9ff0051-5ce4-410c-a36e-4930af061b1b",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Nobel Prize(s) according to the filled fields\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");      \n        pm.test('Response has the `nobelPrizes` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"nobelPrizes\")){\n            if(pm.expect(responseData.nobelPrizes).to.exist){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"nobelPrizes\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `nobelPrizes` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"nobelPrizes\");\n          let nobelPrizesArray = _.get(pm.response.json(), \"nobelPrizes\", \"\");\n          for (let nobelPrizes_it = 0; nobelPrizes_it < nobelPrizesArray.length; i++) {\n            let iterator = nobelPrizes_it;\n            \t\n        pm.test(`${iterator} element of array 'nobelPrizesArray'has 'awardYear' as number`,function(){  \n          if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].awardYear).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].awardYear`, 200)).to.equal(\"number\");\n          }   \n        })\n\n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'category' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].category).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].category`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].category.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].category.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].category.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].category.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].category.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].category.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'categoryFullName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].categoryFullName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].categoryFullName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].categoryFullName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].categoryFullName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].categoryFullName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].categoryFullName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].categoryFullName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].categoryFullName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'dateAwarded' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].dateAwarded).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].dateAwarded`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmount' as number`,function(){  \n          if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].prizeAmount).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].prizeAmount`, 200)).to.equal(\"number\");\n          }   \n        })\n\n\n        pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmountAdjusted' as number`,function(){  \n          if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].prizeAmountAdjusted).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n          }   \n        })\n\n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'topMotivation' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].topMotivation).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].topMotivation`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].topMotivation.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].topMotivation.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].topMotivation.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].topMotivation.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].topMotivation.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].topMotivation.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'laureates' as an array`,function(){ \n          if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrizes[nobelPrizes_it].laureates`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `nobelPrizes[nobelPrizes_it].laureates` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"nobelPrizes[nobelPrizes_it].laureates\");\n          let laureatesArray = _.get(pm.response.json(), \"nobelPrizes[nobelPrizes_it].laureates\", \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; i++) {\n            let iterator = laureates_it;\n            \t\n        pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){  \n          if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].id).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].id`, 200)).to.equal(\"number\");\n          }   \n        })\n\n  \n        pm.expect(_.get(pm.response.json(), \"nobelPrizes[nobelPrizes_it].laureates[laureates_it].id\", \"\")).to.be.at.least(1);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'name' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].name).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].name`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].name.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].name.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].name.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].name.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].name.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].name.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'portion' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].portion).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].portion`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"nobelPrizes[nobelPrizes_it].laureates[laureates_it].portion\", \"\")).to.be.oneOf(1,1/2,1/3,1/4);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'sortOrder' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].sortOrder).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].sortOrder`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"nobelPrizes[nobelPrizes_it].laureates[laureates_it].sortOrder\", \"\")).to.be.oneOf(1,2,3);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'motivation' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].motivation.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n          if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].links).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrizes[nobelPrizes_it].laureates[laureates_it].links`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `nobelPrizes[nobelPrizes_it].laureates[laureates_it].links` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"nobelPrizes[nobelPrizes_it].laureates[laureates_it].links\");\n          let linksArray = _.get(pm.response.json(), \"nobelPrizes[nobelPrizes_it].laureates[laureates_it].links\", \"\");\n          for (let links_it = 0; links_it < linksArray.length; i++) {\n            let iterator = links_it;\n            \t\n      pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].rel).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].rel`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].href).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].href`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].action).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].action`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].types).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[nobelPrizes_it].laureates[laureates_it].links[links_it].types`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n\n          }\n\n      })\n\n          }\n\n      })\n\n      pm.test('Response has the `meta` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta\")){\n          if(pm.expect(responseData.meta).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `meta.offset` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.offset\")){\n            if(pm.expect(responseData.meta.offset).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.offset\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `meta.limit` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.limit\")){\n            if(pm.expect(responseData.meta.limit).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.limit\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n  \n        pm.expect(_.get(pm.response.json(), \"meta.limit\", \"\")).to.be.at.least(1);\n\n        pm.test('Response has the `meta.nobelPrizeYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.nobelPrizeYear\")){\n            if(pm.expect(responseData.meta.nobelPrizeYear).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.nobelPrizeYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `meta.yearTo` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.yearTo\")){\n            if(pm.expect(responseData.meta.yearTo).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.yearTo\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.nobelPrizeCategory\")){\n          if(pm.expect(responseData.meta.nobelPrizeCategory).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.nobelPrizeCategory\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `meta.count` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.count\")){\n            if(pm.expect(responseData.meta.count).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.count\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `links` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"links\")){\n            if(pm.expect(responseData.links).to.exist){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"links\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `links` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"links\");\n          let linksArray = _.get(pm.response.json(), \"links\", \"\");\n          for (let links_it = 0; links_it < linksArray.length; i++) {\n            let iterator = links_it;\n            \t\n      pm.test(`${iterator} element of array 'linksArray' has 'first' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].first).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].first`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'prev' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].prev).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].prev`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'self' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].self).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].self`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'next' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].next).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].next`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'last' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].last).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].last`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "aad87787-81d6-48eb-b78a-bed889ceaa63",
      "name": "Obtain information about one specific Nobel Prize. Used as unique identifier for links.",
      "request": {
        "name": "Obtain information about one specific Nobel Prize. Used as unique identifier for links.",
        "description": {
          "content": "Obtain information about one specific Nobel Prize. Used as unique identifier for links.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "nobelPrize",
            ":category",
            ":year"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{category}}",
              "key": "category",
              "description": "(Required) Nobel Prize category"
            },
            {
              "disabled": false,
              "type": "any",
              "value": "{{year}}",
              "key": "year",
              "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "64660c66-1349-4058-9241-ed633cb5df8b",
          "name": "Successful call of the Nobel Prize giving the category and year",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"nobelPrize\": {\n    \"awardYear\": 1989,\n    \"category\": {\n      \"en\": \"English\",\n      \"se\": \"Svenska\",\n      \"false\": \"Norsk\"\n    },\n    \"categoryFullName\": {\n      \"en\": \"English\",\n      \"se\": \"Svenska\",\n      \"false\": \"Norsk\"\n    },\n    \"dateAwarded\": \"2015-11-12\",\n    \"prizeAmount\": 1000000,\n    \"prizeAmountAdjusted\": 1000000,\n    \"topMotivation\": {\n      \"en\": \"English\",\n      \"se\": \"Svenska\",\n      \"false\": \"Norsk\"\n    },\n    \"laureates\": [\n      {\n        \"id\": 34,\n        \"name\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"portion\": \"1\",\n        \"sortOrder\": \"1\",\n        \"motivation\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"links\": [\n          {\n            \"rel\": \"labore dolor\",\n            \"href\": \"nisi eu mollit\",\n            \"action\": \"Ut commodo\",\n            \"types\": \"id tempor esse\"\n          },\n          {\n            \"rel\": \"elit sed reprehenderit dolor\",\n            \"href\": \"ad eu in dolore esse\",\n            \"action\": \"Duis nostrud culpa dolore reprehenderit\",\n            \"types\": \"dolore minim\"\n          }\n        ]\n      },\n      {\n        \"id\": 34,\n        \"name\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"portion\": \"1\",\n        \"sortOrder\": \"1\",\n        \"motivation\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"links\": [\n          {\n            \"rel\": \"Lorem\",\n            \"href\": \"sunt voluptate\",\n            \"action\": \"eiusmod Ut in quis anim\",\n            \"types\": \"Excepteur dolore ut\"\n          },\n          {\n            \"rel\": \"sint ipsum ea dolor laborum\",\n            \"href\": \"ex id quis sunt\",\n            \"action\": \"commodo ex\",\n            \"types\": \"magna ex esse\"\n          }\n        ]\n      }\n    ]\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b9ac93ee-ea8f-4544-bffd-f111a21e6095",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "532f019e-2a65-42c7-ae70-adf23febdc92",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "64766168-1f24-4782-8dd6-40e86549c1c5",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of the Nobel Prize giving the category and year\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `nobelPrize` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize\")){\n          if(pm.expect(responseData.nobelPrize).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `nobelPrize.awardYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.awardYear\")){\n            if(pm.expect(responseData.nobelPrize.awardYear).to.exist){\n              pm.expect(typeof _.get(responseData, \"nobelPrize.awardYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `nobelPrize.category` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.category\")){\n          if(pm.expect(responseData.nobelPrize.category).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.category\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.category.en` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.category.en\")){\n          if(pm.expect(responseData.nobelPrize.category.en).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.category.en\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.category.se` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.category.se\")){\n          if(pm.expect(responseData.nobelPrize.category.se).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.category.se\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.category.false` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.category.false\")){\n          if(pm.expect(responseData.nobelPrize.category.false).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.category.false\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.categoryFullName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.categoryFullName\")){\n          if(pm.expect(responseData.nobelPrize.categoryFullName).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.categoryFullName\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.categoryFullName.en` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.categoryFullName.en\")){\n          if(pm.expect(responseData.nobelPrize.categoryFullName.en).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.categoryFullName.en\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.categoryFullName.se` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.categoryFullName.se\")){\n          if(pm.expect(responseData.nobelPrize.categoryFullName.se).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.categoryFullName.se\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.categoryFullName.false` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.categoryFullName.false\")){\n          if(pm.expect(responseData.nobelPrize.categoryFullName.false).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.categoryFullName.false\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.dateAwarded` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.dateAwarded\")){\n          if(pm.expect(responseData.nobelPrize.dateAwarded).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.dateAwarded\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `nobelPrize.prizeAmount` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.prizeAmount\")){\n            if(pm.expect(responseData.nobelPrize.prizeAmount).to.exist){\n              pm.expect(typeof _.get(responseData, \"nobelPrize.prizeAmount\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `nobelPrize.prizeAmountAdjusted` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.prizeAmountAdjusted\")){\n            if(pm.expect(responseData.nobelPrize.prizeAmountAdjusted).to.exist){\n              pm.expect(typeof _.get(responseData, \"nobelPrize.prizeAmountAdjusted\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `nobelPrize.topMotivation` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.topMotivation\")){\n          if(pm.expect(responseData.nobelPrize.topMotivation).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.topMotivation\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.topMotivation.en` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.topMotivation.en\")){\n          if(pm.expect(responseData.nobelPrize.topMotivation.en).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.topMotivation.en\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.topMotivation.se` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.topMotivation.se\")){\n          if(pm.expect(responseData.nobelPrize.topMotivation.se).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.topMotivation.se\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `nobelPrize.topMotivation.false` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.topMotivation.false\")){\n          if(pm.expect(responseData.nobelPrize.topMotivation.false).to.exist){\n            pm.expect(typeof _.get(responseData, \"nobelPrize.topMotivation.false\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `nobelPrize.laureates` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"nobelPrize.laureates\")){\n            if(pm.expect(responseData.nobelPrize.laureates).to.exist){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"nobelPrize.laureates\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `nobelPrize.laureates` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"nobelPrize.laureates\");\n          let laureatesArray = _.get(pm.response.json(), \"nobelPrize.laureates\", \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; i++) {\n            let iterator = laureates_it;\n            \t\n        pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){  \n          if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].id).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].id`, 200)).to.equal(\"number\");\n          }   \n        })\n\n  \n        pm.expect(_.get(pm.response.json(), \"nobelPrize.laureates[laureates_it].id\", \"\")).to.be.at.least(1);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'name' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].name).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].name`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].name.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].name.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].name.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].name.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].name.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].name.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'portion' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].portion).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].portion`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"nobelPrize.laureates[laureates_it].portion\", \"\")).to.be.oneOf(1,1/2,1/3,1/4);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'sortOrder' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].sortOrder).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].sortOrder`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"nobelPrize.laureates[laureates_it].sortOrder\", \"\")).to.be.oneOf(1,2,3);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'motivation' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].motivation).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].motivation`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].motivation.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].motivation.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].motivation.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].motivation.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].motivation.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].motivation.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n          if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].links).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrize.laureates[laureates_it].links`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `nobelPrize.laureates[laureates_it].links` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"nobelPrize.laureates[laureates_it].links\");\n          let linksArray = _.get(pm.response.json(), \"nobelPrize.laureates[laureates_it].links\", \"\");\n          for (let links_it = 0; links_it < linksArray.length; i++) {\n            let iterator = links_it;\n            \t\n      pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].links[links_it].rel).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].links[links_it].rel`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].links[links_it].href).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].links[links_it].href`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].links[links_it].action).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].links[links_it].action`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().nobelPrize.laureates[laureates_it].links[links_it].types).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[laureates_it].links[links_it].types`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "49e3e237-c862-472e-8e01-c573c28633dd",
      "name": "Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.",
      "request": {
        "name": "Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.",
        "description": {
          "content": "Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "laureates"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "offset",
              "value": "{{offset}}",
              "description": "The number of items to skip before starting to collect the result set"
            },
            {
              "disabled": false,
              "key": "limit",
              "value": "{{limit}}",
              "description": "The numbers of items to return"
            },
            {
              "disabled": false,
              "key": "sort",
              "value": "{{sort}}",
              "description": "Sort order, result is sorted alphabetically by known name"
            },
            {
              "disabled": false,
              "key": "ID",
              "value": "{{ID}}",
              "description": "Numeric ID of the Laureate (unique key for each Nobel Laureate)"
            },
            {
              "disabled": false,
              "key": "name",
              "value": "{{name}}",
              "description": "Laureate's name (person or organization)"
            },
            {
              "disabled": false,
              "key": "gender",
              "value": "{{gender}}",
              "description": "Laureate's gender if person"
            },
            {
              "disabled": false,
              "key": "motivation",
              "value": "{{motivation}}",
              "description": "Text in Laureate's motivation"
            },
            {
              "disabled": false,
              "key": "affiliation",
              "value": "{{affiliation}}",
              "description": "Affiliation(s) for the Laureate at the time of the award"
            },
            {
              "disabled": false,
              "key": "residence",
              "value": "{{residence}}",
              "description": "Laureate's place of residence at the time is awarded"
            },
            {
              "disabled": false,
              "key": "birthDate",
              "value": "{{birthDate}}",
              "description": "Birth date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD"
            },
            {
              "disabled": false,
              "key": "birthDateTo",
              "value": "{{birthDateTo}}",
              "description": "Return Laureates born within a range of years between birthDate and birthDateTo. BirthDate field is required"
            },
            {
              "disabled": false,
              "key": "deathDate",
              "value": "{{deathDate}}",
              "description": "Death date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD"
            },
            {
              "disabled": false,
              "key": "deathDateTo",
              "value": "{{deathDateTo}}",
              "description": "Return Laureates deceased within a range of years between deathDate and deathhDateTo. DeathDate field is required"
            },
            {
              "disabled": false,
              "key": "foundedDate",
              "value": "{{foundedDate}}",
              "description": "Founding date of Laureate if Organization. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD"
            },
            {
              "disabled": false,
              "key": "birthCity",
              "value": "{{birthCity}}",
              "description": "Laureate's city of birth if person"
            },
            {
              "disabled": false,
              "key": "birthCountry",
              "value": "{{birthCountry}}",
              "description": "Laureate's country of birth if person"
            },
            {
              "disabled": false,
              "key": "birthContinent",
              "value": "{{birthContinent}}",
              "description": "Laureate's continent of birth if person. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "deathCity",
              "value": "{{deathCity}}",
              "description": "Laureate's city of death if person"
            },
            {
              "disabled": false,
              "key": "deathCountry",
              "value": "{{deathCountry}}",
              "description": "Laureate's country of death if person"
            },
            {
              "disabled": false,
              "key": "deathContinent",
              "value": "{{deathContinent}}",
              "description": "Laureate's continent of death if person. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "foundedCity",
              "value": "{{foundedCity}}",
              "description": "City where organization was founded"
            },
            {
              "disabled": false,
              "key": "foundedCountry",
              "value": "{{foundedCountry}}",
              "description": "Country where organization was founded"
            },
            {
              "disabled": false,
              "key": "foundedContinent",
              "value": "{{foundedContinent}}",
              "description": "Continent where organization was founded. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "HeadquartersCity",
              "value": "{{HeadquartersCity}}",
              "description": "City where organization's hearquarters are"
            },
            {
              "disabled": false,
              "key": "HeadquartersCountry",
              "value": "{{HeadquartersCountry}}",
              "description": "Country where organization's hearquarters are"
            },
            {
              "disabled": false,
              "key": "HeadquartersContinent",
              "value": "{{HeadquartersContinent}}",
              "description": "Continent where organization's hearquarters are. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "nobelPrizeYear",
              "value": "{{nobelPrizeYear}}",
              "description": "The year the Nobel Prize was awarded, in the form of YYYY"
            },
            {
              "disabled": false,
              "key": "yearTo",
              "value": "{{yearTo}}",
              "description": "Used in combination with nobelPrizeYear to specify a range of years between nobelPrizeYear and YearTo. nobelPrizeYear is required"
            },
            {
              "disabled": false,
              "key": "nobelPrizeCategory",
              "value": "{{nobelPrizeCategory}}",
              "description": "Nobel Prize category."
            },
            {
              "disabled": false,
              "key": "format",
              "value": "{{format}}",
              "description": "Output format (Default = json)."
            },
            {
              "disabled": false,
              "key": "csvLang",
              "value": "{{csvLang}}",
              "description": "Language if output format is csv (default = en)."
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "bc949a26-48af-440b-bca0-401ec6de396c",
          "name": "Successful call of Laureate(s).",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"laureates\": [\n    {\n      \"id\": 456,\n      \"laureateIfPerson\": {\n        \"knownName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"givenName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"familyName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"fullName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"filename\": \"filename\",\n        \"penname\": \"Penname\",\n        \"gender\": \"female\",\n        \"birth\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"death\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      \"laureateIfOrg\": {\n        \"orgName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"nativeName\": \"Native name\",\n        \"acronym\": \"Acronym\",\n        \"founded\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"dissolution\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"headquarters\": {\n          \"city\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"country\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"cityNow\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"countryNow\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"continent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"locationString\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      \"wikipedia\": {\n        \"slug\": \"slug\",\n        \"english\": \"https://en.wikipedia.org/wiki/\"\n      },\n      \"wikidata\": {\n        \"id\": \"id\",\n        \"url\": \"https://www.wikidata.org/wiki/\"\n      },\n      \"sameAs\": [\n        \"https://\",\n        \"https://\"\n      ],\n      \"links\": [\n        {\n          \"rel\": \"tempor labore ea\",\n          \"href\": \"irure laborum ex minim\",\n          \"action\": \"labore incididunt\",\n          \"types\": \"sunt Duis\"\n        },\n        {\n          \"rel\": \"dolore volupt\",\n          \"href\": \"Ut officia\",\n          \"action\": \"quis est ad pariatur\",\n          \"types\": \"aliquip\"\n        }\n      ],\n      \"nobelPrizes\": [\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"categoryFullName\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"residences\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"links\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"categoryFullName\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"residences\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"links\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": 456,\n      \"laureateIfPerson\": {\n        \"knownName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"givenName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"familyName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"fullName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"filename\": \"filename\",\n        \"penname\": \"Penname\",\n        \"gender\": \"female\",\n        \"birth\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"death\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      \"laureateIfOrg\": {\n        \"orgName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"nativeName\": \"Native name\",\n        \"acronym\": \"Acronym\",\n        \"founded\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"dissolution\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"headquarters\": {\n          \"city\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"country\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"cityNow\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"countryNow\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"continent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"locationString\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      \"wikipedia\": {\n        \"slug\": \"slug\",\n        \"english\": \"https://en.wikipedia.org/wiki/\"\n      },\n      \"wikidata\": {\n        \"id\": \"id\",\n        \"url\": \"https://www.wikidata.org/wiki/\"\n      },\n      \"sameAs\": [\n        \"https://\",\n        \"https://\"\n      ],\n      \"links\": [\n        {\n          \"rel\": \"dolore nulla\",\n          \"href\": \"sunt deserunt sit laboris culpa\",\n          \"action\": \"dolor esse\",\n          \"types\": \"quis pariatur minim esse\"\n        },\n        {\n          \"rel\": \"dolore nulla ex irure\",\n          \"href\": \"sed in m\",\n          \"action\": \"pariatur et exercita\",\n          \"types\": \"proident Ut sint\"\n        }\n      ],\n      \"nobelPrizes\": [\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"categoryFullName\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"residences\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"links\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"categoryFullName\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"se\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"false\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"residences\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"links\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"meta\": {\n    \"offset\": 77087994,\n    \"limit\": -60728910,\n    \"sort\": \"ut dolor eiusmod\",\n    \"ID\": -67032604,\n    \"name\": \"incididunt in ipsum voluptate tempor\",\n    \"gender\": \"exercitation enim irure minim\",\n    \"motivation\": \"dolor cillum id\",\n    \"affiliation\": \"sed\",\n    \"residence\": \"mollit\",\n    \"birthDate\": \"dolor\",\n    \"birthDateTo\": \"voluptate Ut laboris anim\",\n    \"deathDate\": \"ea est\",\n    \"deathDateTo\": \"eiusmod in Duis culp\",\n    \"foundedDate\": \"consequat tempor\",\n    \"birthCity\": \"adipisicing et labore irure\",\n    \"birthCountry\": \"id anim cillum sunt\",\n    \"birthContinent\": \"dolore dolor officia\",\n    \"deathCity\": \"quis pariatur\",\n    \"deathCountry\": \"magna ipsum Excepteur mollit officia\",\n    \"deathContinent\": \"velit adipisicing minim\",\n    \"foundedCity\": \"culpa voluptate\",\n    \"foundedCountry\": \"velit\",\n    \"foundedContinent\": \"Ut\",\n    \"headquartersCity\": \"voluptate dolor\",\n    \"headquartersCountry\": \"ut dolor velit\",\n    \"headquartersContinent\": \"Except\",\n    \"nobelPrizeYear\": -91689500,\n    \"yearTo\": 40909533,\n    \"nobelPrizeCategory\": \"dolore qui Ut\",\n    \"count\": -47369369\n  },\n  \"links\": [\n    {\n      \"first\": \"laborum nulla aliquip culpa\",\n      \"prev\": \"in fugiat reprehenderit\",\n      \"self\": \"deserunt\",\n      \"next\": \"proident dolore\",\n      \"last\": \"minim veniam\"\n    },\n    {\n      \"first\": \"minim labore ad\",\n      \"prev\": \"cupidatat voluptate\",\n      \"self\": \"ullamco eiusmod et ea\",\n      \"next\": \"magna\",\n      \"last\": \"eu eiusmod est cupidatat exercitation\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "52381fd5-351d-44a7-8e49-085eb7ce64de",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c985e233-2ef7-4ef3-a40d-5525e9bd6679",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3ca2dcdd-3b50-49b5-a9f0-65fa547be785",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Laureate(s).\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");      \n        pm.test('Response has the `laureates` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"laureates\")){\n            if(pm.expect(responseData.laureates).to.exist){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"laureates\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `laureates` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"laureates\");\n          let laureatesArray = _.get(pm.response.json(), \"laureates\", \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; i++) {\n            let iterator = laureates_it;\n            \t\n        pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){  \n          if(pm.expect(pm.response.json().laureates[laureates_it].id).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].id`, 200)).to.equal(\"number\");\n          }   \n        })\n\n  \n        pm.expect(_.get(pm.response.json(), \"laureates[laureates_it].id\", \"\")).to.be.at.least(1);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'laureateIfPerson' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'knownName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.knownName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.knownName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.knownName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.knownName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.knownName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.knownName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.knownName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.knownName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'givenName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.givenName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.givenName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.givenName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.givenName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.givenName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.givenName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.givenName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.givenName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'familyName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.familyName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.familyName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.familyName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.familyName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.familyName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.familyName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.familyName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.familyName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'fullName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.fullName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.fullName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.fullName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.fullName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.fullName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.fullName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.fullName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.fullName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'filename' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.filename).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.filename`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'penname' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.penname).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.penname`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.gender).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.gender`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"laureates[laureates_it].laureateIfPerson.gender\", \"\")).to.be.oneOf(female,male);\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'birth' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.date).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.date`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfPerson.birth.place.cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfPerson.birth.place.countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'continent' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.continent).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.continent`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.continent.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.continent.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.continent.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.continent.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.continent.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.continent.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.birth.place.locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.birth.place.locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'death' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.date).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.date`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfPerson.death.place.cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfPerson.death.place.countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'continent' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.continent).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.continent`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.continent.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.continent.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.continent.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.continent.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.continent.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.continent.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfPerson.death.place.locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfPerson.death.place.locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'laureateIfOrg' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'orgName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.orgName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.orgName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.orgName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.orgName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.orgName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.orgName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.orgName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.orgName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'nativeName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.nativeName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.nativeName`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'acronym' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.acronym).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.acronym`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'founded' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.date).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.date`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfOrg.founded.place.cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfOrg.founded.place.countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'continent' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.continent).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.continent`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.continent.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.continent.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.continent.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.continent.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.continent.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.continent.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.founded.place.locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.founded.place.locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'dissolution' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.date).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.date`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfOrg.dissolution.place.cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfOrg.dissolution.place.countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'continent' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.continent).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.continent`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.continent.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.continent.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.continent.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.continent.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.continent.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.continent.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.dissolution.place.locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.dissolution.place.locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'headquarters' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfOrg.headquarters.cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].laureateIfOrg.headquarters.countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'continent' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.continent).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.continent`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.continent.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.continent.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.continent.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.continent.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.continent.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.continent.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].laureateIfOrg.headquarters.locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].laureateIfOrg.headquarters.locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'wikipedia' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].wikipedia).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].wikipedia`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'slug' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].wikipedia.slug).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].wikipedia.slug`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'english' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].wikipedia.english).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].wikipedia.english`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'wikidata' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].wikidata).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].wikidata`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].wikidata.id).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].wikidata.id`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'laureatesArray' has 'url' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].wikidata.url).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].wikidata.url`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].sameAs`))).to.equal(true);\n          }\n        })\n\n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].links).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].links`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `laureates[laureates_it].links` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"laureates[laureates_it].links\");\n          let linksArray = _.get(pm.response.json(), \"laureates[laureates_it].links\", \"\");\n          for (let links_it = 0; links_it < linksArray.length; i++) {\n            let iterator = links_it;\n            \t\n      pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].links[links_it].rel).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].links[links_it].rel`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].links[links_it].href).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].links[links_it].href`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].links[links_it].action).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].links[links_it].action`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].links[links_it].types).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].links[links_it].types`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n\n        pm.test(`${iterator} element of array 'laureatesArray' has 'nobelPrizes' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `laureates[laureates_it].nobelPrizes` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"laureates[laureates_it].nobelPrizes\");\n          let nobelPrizesArray = _.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes\", \"\");\n          for (let nobelPrizes_it = 0; nobelPrizes_it < nobelPrizesArray.length; i++) {\n            let iterator = nobelPrizes_it;\n            \t\n        pm.test(`${iterator} element of array 'nobelPrizesArray'has 'awardYear' as number`,function(){  \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].awardYear).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].awardYear`, 200)).to.equal(\"number\");\n          }   \n        })\n\n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'category' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].category).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].category`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].category.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].category.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].category.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].category.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].category.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].category.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'categoryFullName' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].categoryFullName.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'sortOrder' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].sortOrder).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].sortOrder`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes[nobelPrizes_it].sortOrder\", \"\")).to.be.oneOf(1,2,3);\n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'portion' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].portion).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].portion`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes[nobelPrizes_it].portion\", \"\")).to.be.oneOf(1,1/2,1/3,1/4);\n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'dateAwarded' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].dateAwarded).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].dateAwarded`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'prizeStatus' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeStatus).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeStatus`, 200)).to.equal(\"string\");\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeStatus\", \"\")).to.be.oneOf(received,declined,restricted);\n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'motivation' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].motivation.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmount' as number`,function(){  \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeAmount).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeAmount`, 200)).to.equal(\"number\");\n          }   \n        })\n\n\n        pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmountAdjusted' as number`,function(){  \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeAmountAdjusted).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n          }   \n        })\n\n\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'affiliations' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations\");\n          let affiliationsArray = _.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations\", \"\");\n          for (let affiliations_it = 0; affiliations_it < affiliationsArray.length; i++) {\n            let iterator = affiliations_it;\n            \t\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'name' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].name.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'nameNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nameNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'nativeName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nativeName).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].nativeName`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].affiliations[affiliations_it].locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'residences' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences\");\n          let residencesArray = _.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences\", \"\");\n          for (let residences_it = 0; residences_it < residencesArray.length; i++) {\n            let iterator = residences_it;\n            \t\n      pm.test(`${iterator} element of array 'residencesArray' has 'city' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].city.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'country' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].country.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'cityNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'residencesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].cityNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'residencesArray' has 'countryNow' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n        pm.test(`${iterator} element of array 'residencesArray' has 'sameAs' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.sameAs).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].countryNow.sameAs`))).to.equal(true);\n          }\n        })\n\n\n      pm.test(`${iterator} element of array 'residencesArray' has 'locationString' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString`, 200)).to.equal(\"object\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString.en).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString.en`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString.se).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString.se`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString.false).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].residences[residences_it].locationString.false`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'links' as an array`,function(){ \n          if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].links).to.exist){\n            pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[laureates_it].nobelPrizes[nobelPrizes_it].links`))).to.equal(true);\n          }\n        })\n\n\n      pm.test('Each object in the `laureates[laureates_it].nobelPrizes[nobelPrizes_it].links` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"laureates[laureates_it].nobelPrizes[nobelPrizes_it].links\");\n          let linksArray = _.get(pm.response.json(), \"laureates[laureates_it].nobelPrizes[nobelPrizes_it].links\", \"\");\n          for (let links_it = 0; links_it < linksArray.length; i++) {\n            let iterator = links_it;\n            \t\n      pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].rel).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].rel`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].href).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].href`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].action).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].action`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].types).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`laureates[laureates_it].nobelPrizes[nobelPrizes_it].links[links_it].types`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n\n          }\n\n      })\n\n          }\n\n      })\n\n      pm.test('Response has the `meta` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta\")){\n          if(pm.expect(responseData.meta).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `meta.offset` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.offset\")){\n            if(pm.expect(responseData.meta.offset).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.offset\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `meta.limit` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.limit\")){\n            if(pm.expect(responseData.meta.limit).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.limit\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `meta.sort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.sort\")){\n          if(pm.expect(responseData.meta.sort).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.sort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `meta.ID` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.ID\")){\n            if(pm.expect(responseData.meta.ID).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.ID\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `meta.name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.name\")){\n          if(pm.expect(responseData.meta.name).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.gender\")){\n          if(pm.expect(responseData.meta.gender).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.motivation` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.motivation\")){\n          if(pm.expect(responseData.meta.motivation).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.motivation\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.affiliation` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.affiliation\")){\n          if(pm.expect(responseData.meta.affiliation).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.affiliation\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.residence` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.residence\")){\n          if(pm.expect(responseData.meta.residence).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.residence\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.birthDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.birthDate\")){\n          if(pm.expect(responseData.meta.birthDate).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.birthDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.birthDateTo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.birthDateTo\")){\n          if(pm.expect(responseData.meta.birthDateTo).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.birthDateTo\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.deathDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.deathDate\")){\n          if(pm.expect(responseData.meta.deathDate).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.deathDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.deathDateTo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.deathDateTo\")){\n          if(pm.expect(responseData.meta.deathDateTo).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.deathDateTo\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.foundedDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.foundedDate\")){\n          if(pm.expect(responseData.meta.foundedDate).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.foundedDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.birthCity` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.birthCity\")){\n          if(pm.expect(responseData.meta.birthCity).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.birthCity\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.birthCountry` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.birthCountry\")){\n          if(pm.expect(responseData.meta.birthCountry).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.birthCountry\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.birthContinent` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.birthContinent\")){\n          if(pm.expect(responseData.meta.birthContinent).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.birthContinent\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.deathCity` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.deathCity\")){\n          if(pm.expect(responseData.meta.deathCity).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.deathCity\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.deathCountry` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.deathCountry\")){\n          if(pm.expect(responseData.meta.deathCountry).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.deathCountry\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.deathContinent` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.deathContinent\")){\n          if(pm.expect(responseData.meta.deathContinent).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.deathContinent\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.foundedCity` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.foundedCity\")){\n          if(pm.expect(responseData.meta.foundedCity).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.foundedCity\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.foundedCountry` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.foundedCountry\")){\n          if(pm.expect(responseData.meta.foundedCountry).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.foundedCountry\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.foundedContinent` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.foundedContinent\")){\n          if(pm.expect(responseData.meta.foundedContinent).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.foundedContinent\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.headquartersCity` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.headquartersCity\")){\n          if(pm.expect(responseData.meta.headquartersCity).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.headquartersCity\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.headquartersCountry` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.headquartersCountry\")){\n          if(pm.expect(responseData.meta.headquartersCountry).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.headquartersCountry\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `meta.headquartersContinent` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.headquartersContinent\")){\n          if(pm.expect(responseData.meta.headquartersContinent).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.headquartersContinent\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `meta.nobelPrizeYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.nobelPrizeYear\")){\n            if(pm.expect(responseData.meta.nobelPrizeYear).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.nobelPrizeYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `meta.yearTo` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.yearTo\")){\n            if(pm.expect(responseData.meta.yearTo).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.yearTo\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"meta.nobelPrizeCategory\")){\n          if(pm.expect(responseData.meta.nobelPrizeCategory).to.exist){\n            pm.expect(typeof _.get(responseData, \"meta.nobelPrizeCategory\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `meta.count` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"meta.count\")){\n            if(pm.expect(responseData.meta.count).to.exist){\n              pm.expect(typeof _.get(responseData, \"meta.count\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `links` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"links\")){\n            if(pm.expect(responseData.links).to.exist){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"links\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `links` field has all the required fields',function(){\n          pm.expect(pm.response.json()).to.have.nested.property(\"links\");\n          let linksArray = _.get(pm.response.json(), \"links\", \"\");\n          for (let links_it = 0; links_it < linksArray.length; i++) {\n            let iterator = links_it;\n            \t\n      pm.test(`${iterator} element of array 'linksArray' has 'first' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].first).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].first`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'prev' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].prev).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].prev`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'self' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].self).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].self`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'next' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].next).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].next`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n      pm.test(`${iterator} element of array 'linksArray' has 'last' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().links[links_it].last).to.exist){\n          pm.expect(typeof _.get(pm.response.json(),`links[links_it].last`, 200)).to.equal(\"string\");\n        }\n      })\n \n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "e17ca528-54b8-4358-819a-acc3aaf43ba6",
      "name": "Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.",
      "request": {
        "name": "Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.",
        "description": {
          "content": "Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "laureate",
            ":laureateID"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{laureateID}}",
              "key": "laureateID",
              "description": "(Required) Numeric Laureate's ID. Unique key."
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "ae70ee56-f138-4b2f-83b5-c358fc16160c",
          "name": "Successful call of Laureate given the ID",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f778b5eb-adfb-48fd-bc83-63dc856661c0",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "770ff6ec-7e76-4a7f-86b8-71dd7e0a6b12",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "726edcfc-fc53-4528-80cc-3a3059856670",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Laureate given the ID\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n      pm.test('Response has the `code` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"code\")){\n          if(pm.expect(responseData.code).to.exist){\n            pm.expect(typeof _.get(responseData, \"code\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `message` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"message\")){\n          if(pm.expect(responseData.message).to.exist){\n            pm.expect(typeof _.get(responseData, \"message\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://api.nobelprize.org/2.1",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "979b3a23-9500-44c8-bb89-6bcecd07345e",
    "name": "Nobel Prize Master Data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Information about the Nobel Prizes and the Nobel Prize Laureates",
      "type": "text/plain"
    }
  }
}