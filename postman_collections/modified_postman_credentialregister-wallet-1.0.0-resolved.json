{
  "item": [
    {
      "id": "4d044910-cb47-4a44-9dd9-45290258f07e",
      "name": "accounts",
      "item": [
        {
          "id": "37a2d1fc-e31f-4a75-8a50-6bbbce108533",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "7198abba-9776-4515-b635-b4acc8226d1f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f189b242-ee44-4ac7-8728-4c1193943dd3",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /accounts for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ea6b4778-6653-44b3-b84b-6981057005ba",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "0811273d-9580-4409-bb88-168548c2a5f9",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4f448e99-15ec-440c-88a1-4ab67ba02a8b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /accounts for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "f308c824-50e0-4a4b-8953-8f280d7163fa",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "0f868a4e-b05f-4b21-9a32-c970b6ef6864",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"589eb93c-7e5f-2c70-e270-c297840dcfd0:d955e7c0-83a7-d88c-4a4f-c875bbfa0981\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "68b01bea-ae34-4f29-be49-5f5fdf7d4635",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /login for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"token\")){\n          if(responseData.token!=null){\n            pm.expect(typeof _.get(responseData, \"token\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "6aaff2bc-1f7f-4177-ae33-39f9ea6e60b1",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "a9d540dd-dcbe-4978-b431-b895f2f0b179",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "e1e25cd4-6696-4ad7-8294-cb43ef472e4e",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /logout for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8a71e3f9-819d-4b90-84a0-417f7099d986",
      "name": "me",
      "item": [
        {
          "id": "df42b8ea-50e6-4b29-bc27-298faef3ef53",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "872e5fd3-da19-48dd-a818-5530e20e5d54",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1950-12-17T11:44:53.422Z\",\n  \"did\": \"adipisicing dolore qui sint\",\n  \"email\": \"<email>\",\n  \"id\": \"fe669817-c019-ff8f-5078-d6d694cd9878\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \" Lppp.{'}}{ - Lp'.LL--}}L.'- { -. -' }.L..p\",\n  \"settings\": {\n    \"eiusmod__3e\": -10063369,\n    \"labore_6bd\": \"irure\",\n    \"enim_c76\": \"occaecat in\"\n  },\n  \"updatedAt\": \"2018-06-02T02:10:51.481Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9e5e4d3e-2ad6-439b-9ab7-4938d5056106",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "621289c9-0a53-43db-b4bd-2a09109287b7",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /me for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"did\")){\n          if(responseData.did!=null){\n            pm.expect(typeof _.get(responseData, \"did\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"image\")){\n          if(responseData.image!=null){\n            pm.expect(typeof _.get(responseData, \"image\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"settings\")){\n          if(responseData.settings!=null){\n            pm.expect(typeof _.get(responseData, \"settings\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d3aa1666-1db6-4566-b0a4-ecd29b23acb8",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"laborum_cb3\": true,\n        \"proident_34\": \"{{proident_34}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "7def6cc4-4aab-4c1e-a7fa-efc4f26313df",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"amet_2d\": \"{{amet_2d}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1950-12-17T11:44:53.422Z\",\n  \"did\": \"adipisicing dolore qui sint\",\n  \"email\": \"<email>\",\n  \"id\": \"fe669817-c019-ff8f-5078-d6d694cd9878\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \" Lppp.{'}}{ - Lp'.LL--}}L.'- { -. -' }.L..p\",\n  \"settings\": {\n    \"eiusmod__3e\": -10063369,\n    \"labore_6bd\": \"irure\",\n    \"enim_c76\": \"occaecat in\"\n  },\n  \"updatedAt\": \"2018-06-02T02:10:51.481Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "65976c07-8cb4-4c1f-9212-53c3a54eed44",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"amet_2d\": \"{{amet_2d}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "eb6c7367-754f-427e-b235-9f94f4437d42",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"amet_2d\": \"{{amet_2d}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /me for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"did\")){\n          if(responseData.did!=null){\n            pm.expect(typeof _.get(responseData, \"did\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"image\")){\n          if(responseData.image!=null){\n            pm.expect(typeof _.get(responseData, \"image\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"settings\")){\n          if(responseData.settings!=null){\n            pm.expect(typeof _.get(responseData, \"settings\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "cd2c5d20-9c98-4050-ba7d-86513f8223fb",
      "name": "credentials",
      "item": [
        {
          "id": "bbb9a4a3-16eb-473d-83c9-b96568a46194",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "35079dc9-2a5e-48b8-a062-337a8279cedc",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1952-07-09T09:09:34.871Z\",\n      \"credential\": \"magna\",\n      \"format\": \"jwt_vc_json-ld\",\n      \"id\": \"3511b90c-5a42-22f3-c2f6-60c6065fe080\",\n      \"status\": \"revoked\",\n      \"statusUpdatedAt\": \"2003-04-25T22:45:01.877Z\"\n    },\n    {\n      \"createdAt\": \"1945-05-15T05:13:12.665Z\",\n      \"credential\": \"ut se\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:2a588883-d40d-2ccd-a614-e6d8a1840241\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"2012-08-16T20:32:41.052Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5cc2213f-95c9-4ce2-beb4-ee1fb596e598",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5bce5cf3-7a74-4847-ac73-ca754bccf3cf",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `credentials` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"credentials\")){\n            if(responseData.credentials!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"credentials\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `credentials` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"credentials\");  \n          let credentialsArray = _.get(responseData, \"credentials\", \"\");  \n          for (let i = 0; i < credentialsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'credentials' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"id\")){\n          if(responseData.credentials[i].id != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('credentials format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'format' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"format\")){\n          if(responseData.credentials[i].format != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].format`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'credential' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"credential\")){\n          if(responseData.credentials[i].credential != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].credential`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"status\")){\n          if(responseData.credentials[i].status != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'statusUpdatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"statusUpdatedAt\")){\n          if(responseData.credentials[i].statusUpdatedAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].statusUpdatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.credentials[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0f805f26-4bee-40bf-9f73-9ba3f72e4c8d",
          "name": "{id}",
          "item": [
            {
              "id": "5c914990-020e-4419-9981-f30f7ffa1db4",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "78dac0ba-c1e7-4e09-908d-317ccbb5d525",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2003-07-14T16:05:22.971Z\",\n  \"credential\": \"elit dolor ea\",\n  \"format\": \"jwt_vc_json-ld\",\n  \"id\": \"urn:uuid:b60366c8-3f1a-d330-1fd4-c4c5a89db652\",\n  \"status\": \"pending\",\n  \"statusUpdatedAt\": \"1946-10-09T22:58:39.397Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bd7235a8-9ac9-4344-b751-b7cd15d566cc",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c2c24d91-adda-45f0-b08d-0223c980429e",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /credentials/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `credentials` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"credentials\")){\n            if(responseData.credentials!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"credentials\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `credentials` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"credentials\");  \n          let credentialsArray = _.get(responseData, \"credentials\", \"\");  \n          for (let i = 0; i < credentialsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'credentials' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"id\")){\n          if(responseData.credentials[i].id != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('credentials format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'format' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"format\")){\n          if(responseData.credentials[i].format != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].format`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'credential' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"credential\")){\n          if(responseData.credentials[i].credential != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].credential`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"status\")){\n          if(responseData.credentials[i].status != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'statusUpdatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"statusUpdatedAt\")){\n          if(responseData.credentials[i].statusUpdatedAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].statusUpdatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.credentials[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "485091e0-642e-483a-9611-0d511adf9471",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "d8de12a5-ceca-497c-889a-cc95a1d2d0c6",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "7c871f8f-60c8-4b79-9409-7b88b95c21c9",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "4ec9f414-0e5e-4dd2-898e-5786d86c6dcd",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /credentials/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "7b861fde-58ca-4fe5-9183-db601d3d0e88",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "cc5cb4fc-f61b-440e-93fd-90dcb4ee7c2f",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:f84ea651-70a6-c98e-b593-44d1d063acaf\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"{pL{-p'{ pL-{}- p .}pp{{.-  {pp.'} --- {L' -Lp'.L\"\n      },\n      \"createdAt\": \"1951-09-13T22:21:05.692Z\",\n      \"id\": \"cddd7011-f4d5-204c-343f-01f17da7fecb\",\n      \"token\": \"30231028-cfa4-fa4d-3531-3332bd49bc23:3ec2166e-42d5-789c-cc34-6808915006e5\",\n      \"updatedAt\": \"1955-02-09T04:05:01.223Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:74e1e92a-32c7-7403-159c-02b6c2acd186\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"-  -.LL  -..'}  { '. pp{'} -..-}p'L}{-pp{}pL{L}'\"\n      },\n      \"createdAt\": \"2014-08-06T11:07:59.832Z\",\n      \"id\": \"d04e3ac4-67e3-eeda-b77a-180420a36549\",\n      \"token\": \"6a763548-932f-e26a-3ce0-d1a64b6bbc95:d57d2a5f-722a-aca8-a1ba-a9077db4cc57\",\n      \"updatedAt\": \"1956-05-04T15:42:53.144Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "03be4bdd-9064-495a-a845-5b3cd5d562d6",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /grants for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `grants` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"grants\")){\n            if(responseData.grants!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"grants\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `grants` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"grants\");  \n          let grantsArray = _.get(responseData, \"grants\", \"\");  \n          for (let i = 0; i < grantsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'grants' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"id\")){\n          if(responseData.grants[i].id != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('grants format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'grants' has 'token' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"token\")){\n          if(responseData.grants[i].token != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].token`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('grants has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      pm.test(`${i} element of array 'grants' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.grants[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('grants format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'grants' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.grants[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('grants format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'grants' has 'account' as 'object'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"account\")){\n          if(responseData.grants[i].account != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].account`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "ab95a8fc-439d-4c34-bd55-7ab5c5aad113",
      "name": "authorizations",
      "item": [
        {
          "id": "ef7b592a-3da4-43c9-aaaf-10a9b224c882",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "3805fae2-f013-4d3a-a537-e766bc17dd1b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"1952-06-07T22:07:02.766Z\",\n      \"email\": \"<email>\",\n      \"id\": \"1646b178-4d5a-f18b-02ed-6c18bd11f102\",\n      \"name\": \" .}p'ppLLp'L\",\n      \"updatedAt\": \"1992-05-10T13:48:47.499Z\"\n    },\n    {\n      \"createdAt\": \"2021-04-04T03:39:13.087Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:5a9d5767-d1af-698b-d37b-7514dacce5fa\",\n      \"name\": \"--{}-L L.  - . }} . 'p}pL' ''''}}.}}.-L{{. .p{..-.{}Lp{..L'p'.-L -LL--' .'.{L.p'}p--\",\n      \"updatedAt\": \"1958-05-22T00:06:28.913Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f85c236a-4e08-4807-bf98-6d61f0c7849f",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c778345b-b51d-49ec-8b2d-a35b086311cc",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /authorizations for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `authorizations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"authorizations\")){\n            if(responseData.authorizations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"authorizations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `authorizations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"authorizations\");  \n          let authorizationsArray = _.get(responseData, \"authorizations\", \"\");  \n          for (let i = 0; i < authorizationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'authorizations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"id\")){\n          if(responseData.authorizations[i].id != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('authorizations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'name' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"name\")){\n          if(responseData.authorizations[i].name != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].name`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test(`${i} element of array 'authorizations' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"email\")){\n          if(responseData.authorizations[i].email != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.authorizations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.authorizations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fea53b66-d4a2-4f67-92b6-9446ea359901",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "0095caee-fe11-49e6-936e-45c54750fc59",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2019-05-28T08:07:59.252Z\",\n  \"email\": \"<email>\",\n  \"id\": \"017c8a8e-6aab-6b00-fefc-bc5c601346bb\",\n  \"name\": \"}L}}{L-pL.{p-.L-.LL-.{p-{ '{\",\n  \"updatedAt\": \"1953-10-05T23:55:17.327Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "abdd115d-eccd-4271-a33c-da57ce3c520f",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "26926a60-4424-4e9c-9a62-a92efcf510a4",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /authorizations for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2c22235f-17c0-44e4-b28a-70181c740013",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "1556d4e5-75d9-48b6-a5a3-e3e2bce2438f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "efd8a05d-3017-42f7-8118-44b46b1d50a7",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0e9b9ef2-7003-4b88-82dc-56c1a29e3ab4",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /authorizations/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "77372848-fe94-44b1-9338-e3d8f2e3a76d",
      "name": "apikeys",
      "item": [
        {
          "id": "afc56210-a756-4a18-b559-759ea671c6ea",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "b8b06dd0-2b79-455d-986b-a9900ee88a66",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"2014-11-22T18:51:45.394Z\",\n      \"id\": \"6e64889f-256f-7798-24bd-7dca8790ccf3\"\n    },\n    {\n      \"createdAt\": \"2006-02-19T03:28:28.196Z\",\n      \"id\": \"urn:uuid:3eb73e00-3915-3e65-ee65-6dc28b39f284\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "88ff0f8e-8ae0-4f62-978d-0dbb03de61e2",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8c90d987-3fff-4575-b0b4-2b5529d7cb48",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /apikeys for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `apikeys` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"apikeys\")){\n            if(responseData.apikeys!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"apikeys\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `apikeys` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"apikeys\");  \n          let apikeysArray = _.get(responseData, \"apikeys\", \"\");  \n          for (let i = 0; i < apikeysArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'apikeys' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.apikeys[i]).to.have.nested.property(\"id\")){\n          if(responseData.apikeys[i].id != null){\n            pm.expect(typeof _.get(responseData,`apikeys[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('apikeys format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"apikeys\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'apikeys' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.apikeys[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.apikeys[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`apikeys[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('apikeys format to be date-time',function(){\n                pm.expect(_.get(responseData, \"apikeys\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "11fcb5e5-aa9b-49e5-a265-00c4f98d326f",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f63e6c87-11dc-4578-ae38-6936c35a0711",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2002-12-12T08:56:27.624Z\",\n  \"id\": \"urn:uuid:44506e47-0668-b739-92d5-b48bef07df83\",\n  \"token\": \"c3b096dc-6981-af0b-d006-19e99b7a7bec:015560bb-04bd-4a1b-f1a0-6a13fb3f84e9\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "152ce7d1-fd8a-4a3a-9006-716426ff0d3d",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "40f2db9f-2391-463a-8bd1-ffc0e2578371",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /apikeys for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"token\")){\n          if(responseData.token!=null){\n            pm.expect(typeof _.get(responseData, \"token\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d1a22678-536d-43c3-ae8a-49fab5c11548",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "7f9d1ba3-acaa-477f-a0d2-e8c33a66f1a9",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e6a3e3f5-abf3-490d-a348-eca5f0f004a5",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "efc38412-c6be-4f04-8526-be7a361a0b58",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /apikeys/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "59997b2d-be0a-4217-b414-f018978ce45d",
      "name": "recipients",
      "item": [
        {
          "id": "1d9ebe25-dc56-47cf-a7d9-0a107878cb3f",
          "name": "branches",
          "item": [
            {
              "id": "aad1fe74-402d-4b5c-9bba-b2f4b39ce633",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "30a75889-6a39-4c79-98ee-8f4cdd9e8434",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"838613879170\",\n      \"cocNumber\": \"02841895\",\n      \"createdAt\": \"1981-07-02T08:09:20.456Z\",\n      \"deregistrationDate\": \"1976-03-10\",\n      \"eoriNumber\": \"NL575960572\",\n      \"id\": \"98be36e5-e088-f92d-4611-6e4ada7f5d99\",\n      \"tradeName\": \"non in in ut\",\n      \"tradeNames\": [\n        \"cillum in qui\",\n        \"eu\"\n      ],\n      \"updatedAt\": \"1962-02-07T00:31:23.376Z\",\n      \"email\": \"tFZ.b^4.AW`O6g#s4g@[321.81.300.20]\",\n      \"phone\": \"et ex sunt ut\"\n    },\n    {\n      \"cocBranchNumber\": \"407087377756\",\n      \"cocNumber\": \"02058594\",\n      \"createdAt\": \"1951-08-16T11:11:26.730Z\",\n      \"deregistrationDate\": \"1959-11-10\",\n      \"eoriNumber\": \"NL229421113\",\n      \"id\": \"523d7e20-34a9-f4a4-053d-80b7ed1a620b\",\n      \"tradeName\": \"quis aliquip ea cupidatat\",\n      \"tradeNames\": [\n        \"et veniam fugiat\",\n        \"fugiat nulla elit venia\"\n      ],\n      \"updatedAt\": \"1968-06-19T00:11:00.943Z\",\n      \"email\": \"\\\"^`LfY\\\"@mwsh2KbnGu.zbXlhuns\",\n      \"phone\": \"ut\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b9dd099a-bb1a-41b0-9bc3-a394bf2d6629",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c5667d5c-7226-4777-8d36-4e00c3539d1a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(responseData, \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"id\")){\n          if(responseData.branches[i].id != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('branches format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"email\")){\n          if(responseData.branches[i].email != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"phone\")){\n          if(responseData.branches[i].phone != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(responseData.branches[i].cocNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocBranchNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeName\")){\n          if(responseData.branches[i].tradeName != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].tradeName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(responseData.branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(responseData, `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].eoriNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].deregistrationDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.branches[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.branches[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "32050a95-c8b4-407c-817c-7481e78572c5",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "869b4dcf-faab-45ed-be9e-46bd80085dd9",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1961-12-18T02:09:33.484Z\",\n  \"deregistrationDate\": \"1998-05-14\",\n  \"eoriNumber\": \"NL468205406\",\n  \"id\": \"551efd58-fc4f-56db-7392-08106624b2c7\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"eiusmod ad \",\n    \"ex dolor consequat\"\n  ],\n  \"updatedAt\": \"1991-09-27T15:32:26.125Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "56867b60-393b-46cc-bd9b-480924da576a",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1961-12-18T02:09:33.484Z\",\n  \"deregistrationDate\": \"1998-05-14\",\n  \"eoriNumber\": \"NL468205406\",\n  \"id\": \"551efd58-fc4f-56db-7392-08106624b2c7\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"eiusmod ad \",\n    \"ex dolor consequat\"\n  ],\n  \"updatedAt\": \"1991-09-27T15:32:26.125Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8a9cc24f-b428-4c39-8c9a-454854ab7e76",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bc3e1573-d883-431a-98ff-86136271a50f",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches for http method type put in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "cdcf6252-7a5b-4d77-8ae7-26c997eab984",
              "name": "{id}",
              "item": [
                {
                  "id": "433e2d6c-dc4e-4a5e-b1b4-6e386ad6b144",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "2b78d070-370b-486a-81b5-4f9c037004e3",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1961-12-18T02:09:33.484Z\",\n  \"deregistrationDate\": \"1998-05-14\",\n  \"eoriNumber\": \"NL468205406\",\n  \"id\": \"551efd58-fc4f-56db-7392-08106624b2c7\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"eiusmod ad \",\n    \"ex dolor consequat\"\n  ],\n  \"updatedAt\": \"1991-09-27T15:32:26.125Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "54f7b740-f929-498a-8814-2f709e4a2103",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "49251cf3-a32b-4d9c-b79f-0d72cbdf9047",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(responseData, \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"id\")){\n          if(responseData.branches[i].id != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('branches format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"email\")){\n          if(responseData.branches[i].email != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"phone\")){\n          if(responseData.branches[i].phone != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(responseData.branches[i].cocNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocBranchNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeName\")){\n          if(responseData.branches[i].tradeName != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].tradeName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(responseData.branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(responseData, `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].eoriNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].deregistrationDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.branches[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.branches[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "407ad832-44b5-4dfa-9cac-1b04296fefe8",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "393db08e-6fb8-4fae-b43b-2129fabdd2e1",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "5e0c98e8-553a-4453-8f42-45529cdab3b3",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "30c69b7d-351b-492a-abbc-e1c8a29c50fa",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "a659fefb-a1f4-4b89-a3ea-7f87c643e4da",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "bc57d0e3-cd49-4656-9655-9b5c94a5ed9e",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1961-12-18T02:09:33.484Z\",\n  \"deregistrationDate\": \"1998-05-14\",\n  \"eoriNumber\": \"NL468205406\",\n  \"id\": \"551efd58-fc4f-56db-7392-08106624b2c7\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"eiusmod ad \",\n    \"ex dolor consequat\"\n  ],\n  \"updatedAt\": \"1991-09-27T15:32:26.125Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "aca21c0e-2771-44c0-a013-666767c2af21",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "8c5fe6d3-3bab-4077-bc61-e93e69cf4f04",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches/:id for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "028123c1-fcfb-40b0-9264-ca2b411eabef",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "052d200f-491a-4878-9b35-189ad525ebae",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "be2621a0-c988-4a37-b666-23566252f6fa",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1959-09-13T04:15:28.755Z\",\n      \"credentialUrl\": \"ZdtKK:H?;mxsAq$\",\n      \"endDate\": \"2020-04-12\",\n      \"id\": \"e93edb70-97ce-d791-7ddf-abd3496dc857\",\n      \"issuedAt\": \"1947-07-21T09:29:51.836Z\",\n      \"reference\": \"qui\",\n      \"startDate\": \"2005-04-28\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1983-03-08\",\n      \"updatedAt\": \"2014-05-02T17:33:01.591Z\"\n    },\n    {\n      \"createdAt\": \"1975-02-17T15:20:26.131Z\",\n      \"credentialUrl\": \"p:/^]qg$\",\n      \"endDate\": \"1952-04-17\",\n      \"id\": \"bd60f1e3-78fc-6a24-709d-d51ac151689f\",\n      \"issuedAt\": \"1966-04-16T16:18:18.569Z\",\n      \"reference\": \"consectetur sunt voluptate\",\n      \"startDate\": \"1964-10-01\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2014-08-02\",\n      \"updatedAt\": \"1967-09-17T22:22:31.495Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "a99db8d2-933a-4d27-a572-274d7f4d321b",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "71caef11-5765-4891-943b-3f83ff00ad8c",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(responseData, \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"id\")){\n          if(responseData.branches[i].id != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('branches format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"email\")){\n          if(responseData.branches[i].email != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"phone\")){\n          if(responseData.branches[i].phone != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(responseData.branches[i].cocNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocBranchNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeName\")){\n          if(responseData.branches[i].tradeName != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].tradeName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(responseData.branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(responseData, `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].eoriNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].deregistrationDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.branches[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.branches[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "085b482d-169b-408f-a11a-80073f7b9f29",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "7ce0e9b4-1790-4c73-907d-a5edf816a62d",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1986-11-23T09:23:41.459Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:2f9d705e-1e26-7ebc-d505-c4d025138917\",\n  \"issuedAt\": \"1956-08-11T03:43:59.079Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1992-12-13\",\n  \"updatedAt\": \"1990-04-21T15:06:12.375Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "1e51eafd-3feb-4846-b000-3f989f896fae",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "0f6352ba-efaf-4a17-bf7f-8072e75d00c9",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"startDate\")){\n          if(responseData.startDate!=null){\n            pm.expect(typeof _.get(responseData, \"startDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"endDate\")){\n          if(responseData.endDate!=null){\n            pm.expect(typeof _.get(responseData, \"endDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.credentialUrl!=null){\n            pm.expect(typeof _.get(responseData, \"credentialUrl\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.suspendedUntil!=null){\n            pm.expect(typeof _.get(responseData, \"suspendedUntil\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"issuedAt\")){\n          if(responseData.issuedAt!=null){\n            pm.expect(typeof _.get(responseData, \"issuedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "815fa568-e0b9-49ed-93db-dc6e8dd227f1",
          "name": "persons",
          "item": [
            {
              "id": "264c92b3-8937-47d6-b79d-069029e57140",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "b20bb0fb-9f6f-4189-9a2f-67649015495b",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"1990-08-16\",\n      \"birthPlace\": \"{p'.p}--,-}L}.L -\",\n      \"countryCode\": \"AY\",\n      \"createdAt\": \"1999-02-26T16:25:29.467Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"L '-{ p\",\n      \"houseNumber\": \"385\",\n      \"houseNumberPostfix\": \"KOvC-JfY.J\",\n      \"id\": \"urn:uuid:d1d5f146-4f1a-5387-9372-1e03ebdd94c1\",\n      \"initials\": \"CYEM\",\n      \"lastName\": \"LL.Lp.}L.{{-\",\n      \"middleName\": \"p - .---.LL-\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"42056\",\n      \"reference\": \"nulla\",\n      \"updatedAt\": \"2005-09-21T23:48:08.668Z\"\n    },\n    {\n      \"birthDate\": \"2019-09-01\",\n      \"birthPlace\": \"{ -'.}}L'{'L{-L{'p  Lp,{, ..Lpp .p -, ..L'-L ' L,L-{.'{L L} p{{p,}'{,p,ppLLp.\",\n      \"countryCode\": \"SD\",\n      \"createdAt\": \"1960-09-14T18:35:44.504Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"L\",\n      \"houseNumber\": \"415\",\n      \"houseNumberPostfix\": \"v\",\n      \"id\": \"urn:uuid:d3df0f62-7fe0-1d73-8c95-6186d9e67424\",\n      \"initials\": \"OOVOJ\",\n      \"lastName\": \"p.p }{}{pL{-\",\n      \"middleName\": \"L\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"09481\",\n      \"reference\": \"incididunt\",\n      \"updatedAt\": \"2016-06-29T14:10:49.165Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6bf9596f-1a93-4b8f-bcc1-f06c183441a1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d4170e33-830b-4682-a541-1e86f7030c4b",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(responseData, \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"id\")){\n          if(responseData.persons[i].id != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('persons format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"initials\")){\n          if(responseData.persons[i].initials != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].initials`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"firstName\")){\n          if(responseData.persons[i].firstName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].firstName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"middleName\")){\n          if(responseData.persons[i].middleName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].middleName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"lastName\")){\n          if(responseData.persons[i].lastName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].lastName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthDate\")){\n          if(responseData.persons[i].birthDate != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(responseData.persons[i].birthPlace != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthPlace`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"phone\")){\n          if(responseData.persons[i].phone != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"email\")){\n          if(responseData.persons[i].email != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"postalCode\")){\n          if(responseData.persons[i].postalCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].postalCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(responseData.persons[i].houseNumber != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumberPostfix`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"countryCode\")){\n          if(responseData.persons[i].countryCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].countryCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"reference\")){\n          if(responseData.persons[i].reference != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('persons length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.persons[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.persons[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "df9bc858-4fa7-482a-857b-852f756899d6",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "9e8f5ffa-979a-4578-9382-142fa716d627",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2005-05-11T14:46:19.219Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:ee53f53e-5f34-620e-47fb-c856c61321d7\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2023-03-27T20:48:18.750Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d823791a-cc4a-47dc-8b45-673d2f7e03b4",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c3cbaf81-021f-4966-a370-9aa2396575b4",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "6a2ad099-5f44-4a99-928d-29748244e1fc",
              "name": "{id}",
              "item": [
                {
                  "id": "962c215a-0b12-4cd6-b731-7ff7fed29102",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "9ed6b2ab-9da9-46cb-8264-94d0fc9d464c",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2005-05-11T14:46:19.219Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:ee53f53e-5f34-620e-47fb-c856c61321d7\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2023-03-27T20:48:18.750Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "b0c8c25f-9ac5-4ff0-826f-f05aefb75a4c",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "f36fc2e9-61a9-4d77-9548-3a432d6bc003",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(responseData, \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"id\")){\n          if(responseData.persons[i].id != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('persons format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"initials\")){\n          if(responseData.persons[i].initials != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].initials`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"firstName\")){\n          if(responseData.persons[i].firstName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].firstName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"middleName\")){\n          if(responseData.persons[i].middleName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].middleName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"lastName\")){\n          if(responseData.persons[i].lastName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].lastName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthDate\")){\n          if(responseData.persons[i].birthDate != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(responseData.persons[i].birthPlace != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthPlace`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"phone\")){\n          if(responseData.persons[i].phone != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"email\")){\n          if(responseData.persons[i].email != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"postalCode\")){\n          if(responseData.persons[i].postalCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].postalCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(responseData.persons[i].houseNumber != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumberPostfix`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"countryCode\")){\n          if(responseData.persons[i].countryCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].countryCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"reference\")){\n          if(responseData.persons[i].reference != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('persons length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.persons[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.persons[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "c540c518-0349-44d9-bc61-332e4dd06df0",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "0039068e-a39f-4eb1-9d8c-a92e747125f8",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "dbb489b7-ddf0-4f70-8f56-68522feaa162",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "1568aa1f-f056-44d4-8c5b-83a8ceb453f7",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "fb83c2b2-fb6c-49b3-b623-058fe55488e8",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "f11e718d-8755-4bd8-bfaa-3409568831d4",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2005-05-11T14:46:19.219Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:ee53f53e-5f34-620e-47fb-c856c61321d7\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2023-03-27T20:48:18.750Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "cec2f52b-0b13-4a12-9b29-f96cbd36b112",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "9419be05-40af-4001-925a-6c4eee123950",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons/:id for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "b62b62a8-625c-424a-8af9-b6cd41de6094",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "efd7506e-d31d-40ce-870b-f5757c4b58e4",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "40f95792-3a04-4933-ac42-4b734e7270ec",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"2022-09-07T02:48:01.898Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:b6328504-ab08-e41b-fae6-e7ae8a953816\",\n      \"issuedAt\": \"1990-08-12T00:39:16.131Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1984-04-27\",\n      \"updatedAt\": \"2023-08-21T21:55:56.041Z\"\n    },\n    {\n      \"createdAt\": \"1945-02-27T16:23:42.327Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:ea3c547d-5a14-3a7d-9eee-1aa8ede52a3d\",\n      \"issuedAt\": \"1962-05-21T16:43:03.408Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1947-05-18\",\n      \"updatedAt\": \"2015-03-22T12:10:34.172Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "0a873031-8cdd-4cbd-86ec-7b881274c5a9",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "b1204f66-5e01-4725-a314-ee379e806ec8",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(responseData, \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"id\")){\n          if(responseData.persons[i].id != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('persons format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"initials\")){\n          if(responseData.persons[i].initials != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].initials`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"firstName\")){\n          if(responseData.persons[i].firstName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].firstName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"middleName\")){\n          if(responseData.persons[i].middleName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].middleName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"lastName\")){\n          if(responseData.persons[i].lastName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].lastName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthDate\")){\n          if(responseData.persons[i].birthDate != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(responseData.persons[i].birthPlace != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthPlace`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"phone\")){\n          if(responseData.persons[i].phone != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"email\")){\n          if(responseData.persons[i].email != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"postalCode\")){\n          if(responseData.persons[i].postalCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].postalCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(responseData.persons[i].houseNumber != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumberPostfix`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"countryCode\")){\n          if(responseData.persons[i].countryCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].countryCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"reference\")){\n          if(responseData.persons[i].reference != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('persons length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.persons[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.persons[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "086a0c43-0388-4c22-92e9-c6acd8433c5d",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "428979b7-9429-49d1-9139-df4a54cd984c",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1986-11-23T09:23:41.459Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:2f9d705e-1e26-7ebc-d505-c4d025138917\",\n  \"issuedAt\": \"1956-08-11T03:43:59.079Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1992-12-13\",\n  \"updatedAt\": \"1990-04-21T15:06:12.375Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "1bce4529-beb8-4e9e-a367-a68eb239eef1",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "3fb617c5-1f57-4757-8683-606e5c0c9f31",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "9d569daf-1a3c-4f78-a647-71de83c9a156",
      "name": "registrations",
      "item": [
        {
          "id": "792d0804-ae6b-4533-a9f1-b9ff82269fd6",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "70551645-1792-4c8c-8e8c-a5a142b82e97",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1955-12-25T12:16:05.178Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"8d30afbe-1ce2-d98c-0efd-1254a962eb53\",\n      \"issuedAt\": \"2005-12-28T17:49:54.483Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:d30b1262-96d4-aef9-b06b-128016c79240\",\n        \"name\": \"{p }}{-{{ L''p{L'L }p{'p{. p.}- 'p'}L.'p . }. 'p'p}{{'{'.L-'''Lp}-'.  pL  L'.. '}''L{.L} -}}}-{'pp.\",\n        \"type\": \"employee\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1964-10-30\",\n      \"updatedAt\": \"2012-07-17T01:25:04.760Z\"\n    },\n    {\n      \"createdAt\": \"1966-07-25T09:31:36.410Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"fbe1c638-af33-3bd8-a9d7-38914d1fd148\",\n      \"issuedAt\": \"2022-06-15T01:54:40.947Z\",\n      \"recipient\": {\n        \"id\": \"31bfd9cb-b548-19cc-89e4-dff18df8e00d\",\n        \"name\": \". L{ '\",\n        \"type\": \"person\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1957-01-29\",\n      \"updatedAt\": \"1970-05-15T01:16:10.512Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "187ea85d-1dfe-44fa-81e4-65efa2613e5d",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "98e1c479-5e02-4a37-9a5c-1a66adec7b5d",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `registrations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"registrations\")){\n            if(responseData.registrations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"registrations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `registrations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"registrations\");  \n          let registrationsArray = _.get(responseData, \"registrations\", \"\");  \n          for (let i = 0; i < registrationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'registrations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"id\")){\n          if(responseData.registrations[i].id != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('registrations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"reference\")){\n          if(responseData.registrations[i].reference != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('registrations length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'startDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"startDate\")){\n          if(responseData.registrations[i].startDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].startDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'endDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"endDate\")){\n          if(responseData.registrations[i].endDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].endDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"status\")){\n          if(responseData.registrations[i].status != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'credentialUrl' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.registrations[i].credentialUrl != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].credentialUrl`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('registrations has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'suspendedUntil' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.registrations[i].suspendedUntil != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].suspendedUntil`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'issuedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"issuedAt\")){\n          if(responseData.registrations[i].issuedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].issuedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.registrations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.registrations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'recipient' as 'object'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"recipient\")){\n          if(responseData.registrations[i].recipient != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].recipient`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "cb0927db-0ec5-4147-b90d-1407f66fa98b",
          "name": "{id}",
          "item": [
            {
              "id": "66fa948f-6c6d-41ca-b9b0-9d1bc72d96f9",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "19482211-7741-4fcd-b01d-cf4b0c82cf2e",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1958-11-26T03:48:58.657Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:75b51cfc-04b7-a476-38a4-ccdb8743d0ce\",\n  \"issuedAt\": \"1958-04-30T22:24:03.896Z\",\n  \"recipient\": {\n    \"id\": \"046a112b-7eaa-23d6-40b7-c7c83201542b\",\n    \"name\": \" \",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1996-01-23\",\n  \"updatedAt\": \"2022-01-28T02:10:50.174Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3dadb770-dfa0-49a5-b0ce-cc9e106d63ec",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "853f3836-d628-45c5-abfb-c7eebf9a5b7e",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /registrations/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `registrations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"registrations\")){\n            if(responseData.registrations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"registrations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `registrations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"registrations\");  \n          let registrationsArray = _.get(responseData, \"registrations\", \"\");  \n          for (let i = 0; i < registrationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'registrations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"id\")){\n          if(responseData.registrations[i].id != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('registrations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"reference\")){\n          if(responseData.registrations[i].reference != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('registrations length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'startDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"startDate\")){\n          if(responseData.registrations[i].startDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].startDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'endDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"endDate\")){\n          if(responseData.registrations[i].endDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].endDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"status\")){\n          if(responseData.registrations[i].status != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'credentialUrl' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.registrations[i].credentialUrl != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].credentialUrl`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('registrations has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'suspendedUntil' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.registrations[i].suspendedUntil != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].suspendedUntil`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'issuedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"issuedAt\")){\n          if(responseData.registrations[i].issuedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].issuedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.registrations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.registrations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'recipient' as 'object'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"recipient\")){\n          if(responseData.registrations[i].recipient != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].recipient`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d980a3a3-d7ba-416f-b4fa-71402ede62ab",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "953ee654-db7c-408d-a06d-0e11c7f673e5",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "7cbf7007-9c6a-4826-ac98-f45019b0f0d3",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "00bd9108-b9ae-4c93-b0af-457d7a67635a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /registrations/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "43c3a2e8-8bfd-461e-8302-e4c2a7df96c4",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "be7259e2-6eaf-4caa-89f8-4f51f1553e3f",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1969-11-29T04:18:06.047Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:10b469eb-47bc-e3dd-f572-ac44d02a629e\",\n  \"issuedAt\": \"1976-06-09T03:08:24.271Z\",\n  \"recipient\": {\n    \"id\": \"874fc925-6704-3bcb-e4ac-31f178efa30e\",\n    \"name\": \".L}..p-'L'}p'-}L}}pp. }' p{.L} 'L--pp.L.p'p{{p  p. -p .}.p }'L-'-\",\n    \"type\": \"branch\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"2014-05-12T22:05:16.115Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7e102a33-0db5-4583-bc49-1d0762fda8f1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e8316db5-b454-49f0-9670-d16c24436ae5",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /registrations/:id for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"startDate\")){\n          if(responseData.startDate!=null){\n            pm.expect(typeof _.get(responseData, \"startDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"endDate\")){\n          if(responseData.endDate!=null){\n            pm.expect(typeof _.get(responseData, \"endDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.credentialUrl!=null){\n            pm.expect(typeof _.get(responseData, \"credentialUrl\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.suspendedUntil!=null){\n            pm.expect(typeof _.get(responseData, \"suspendedUntil\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"issuedAt\")){\n          if(responseData.issuedAt!=null){\n            pm.expect(typeof _.get(responseData, \"issuedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient\")){\n          if(responseData.recipient!=null){\n            pm.expect(typeof _.get(responseData, \"recipient\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.id\")){\n          if(responseData.recipient.id!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.name\")){\n          if(responseData.recipient.name!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.type\")){\n          if(responseData.recipient.type!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.type\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "b090d570-5d1a-4e23-af74-4155b459753b",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "58fd1e77-43eb-4d40-a66c-69956e3aff3d",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /errors for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "019aa0c9-4637-414b-b9f7-feb75307ef05",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "3f6c000b-9118-44a3-a296-a37ac51726b1",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "ce06eb34-fc8e-445b-893f-ba3cf4303ed9",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}