{
  "item": [
    {
      "id": "5f0475f8-bbd6-4105-b3d3-45c57dd6e791",
      "name": "accounts",
      "item": [
        null,
        null
      ],
      "event": []
    },
    null,
    null,
    {
      "id": "b29e2383-0119-432c-8157-2bc7ba86f83a",
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "id": "8f520bb9-4573-432c-ae20-a0a9b0519f7c",
      "name": "credentials",
      "item": [
        null,
        {
          "id": "3eb0fb4f-6306-4d9d-b958-cd8a2217d323",
          "name": "{id}",
          "item": [
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "id": "3ca5c5da-4650-42fa-9d7c-7217ce540361",
      "name": "authorizations",
      "item": [
        {
          "id": "ac593825-d27c-4042-88c8-7949f764bda4",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "fdaa150e-c227-45cc-a505-2bc33bcff67d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"1961-10-12T01:07:58.145Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:b1307545-1f81-3413-472c-3f9f8168bdfd\",\n      \"name\": \".{.pL}' p} {} }}.-{{p'{L}p'p.LL--{..p'-{ '}-} p'p{.- .{'{{ -p}-p.p{-.--p{}.p-\",\n      \"updatedAt\": \"1992-05-16T00:28:18.986Z\"\n    },\n    {\n      \"createdAt\": \"1997-11-15T09:26:35.485Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:c221eefd-b322-71c5-baf3-739dd83d674c\",\n      \"name\": \"-{} {- L{-'}}.{. {.p\",\n      \"updatedAt\": \"1999-02-19T18:16:00.722Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "bd7a4e13-da33-4424-9c72-b3b4fb17de95",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b1e98b9a-ff8c-41d7-8865-7d1140e6b392",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /authorizations for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `authorizations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"authorizations\")){\n            if(responseData.authorizations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"authorizations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `authorizations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"authorizations\");  \n          let authorizationsArray = _.get(responseData, \"authorizations\", \"\");  \n          for (let i = 0; i < authorizationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'authorizations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"id\")){\n          if(responseData.authorizations[i].id != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('authorizations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'name' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"name\")){\n          if(responseData.authorizations[i].name != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].name`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test(`${i} element of array 'authorizations' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"email\")){\n          if(responseData.authorizations[i].email != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.authorizations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.authorizations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        null,
        null
      ],
      "event": []
    },
    {
      "id": "31ca224d-a1ce-4fbe-b1c5-8f083c239947",
      "name": "apikeys",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "f283eb43-4657-4c77-8733-631c04493bf3",
      "name": "recipients",
      "item": [
        {
          "id": "3f59cd6c-3bf8-42bf-a2eb-ac92973506d6",
          "name": "branches",
          "item": [
            null,
            null,
            {
              "id": "7cf20495-1df7-4836-8e9d-abf053da8bc2",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "bf50666a-5db1-40b4-8a0a-50714d5027fa",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "dc189e3d-62ec-4b22-ab79-40d54bebdbaa",
          "name": "persons",
          "item": [
            null,
            null,
            {
              "id": "8675337d-0636-4124-9abf-c3af7921c4aa",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "29de0a86-18dc-4087-a483-891d9d03ec4a",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "4233ae8f-fd06-4909-894a-423842ad2ef5",
      "name": "registrations",
      "item": [
        null,
        {
          "id": "8e0a692f-c473-4269-ac71-33911c940fcd",
          "name": "{id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    null
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "9bf1a846-6fd8-441b-9981-dc21b4f627e2",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}