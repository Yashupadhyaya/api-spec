{
  "item": [
    {
      "id": "92946839-c8e5-414d-b791-59e3e0da0873",
      "name": "accounts",
      "item": [
        null,
        null
      ],
      "event": []
    },
    null,
    null,
    {
      "id": "68f8caaa-bcbb-47e8-bb94-4ea523998bdd",
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "id": "acc6a727-55e7-4f25-9f59-4ad0f6f29acf",
      "name": "credentials",
      "item": [
        null,
        {
          "id": "09f34700-afe7-4dee-98aa-7e82f10ab4ee",
          "name": "{id}",
          "item": [
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "id": "0d47279d-427d-4b26-b0d9-f7afbd899d64",
      "name": "authorizations",
      "item": [
        {
          "id": "76cf789e-1537-425a-bf5a-e4dec83e7446",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "8fe7618b-2906-4303-afe3-828c14b101de",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"1958-06-22T07:15:18.719Z\",\n      \"email\": \"<email>\",\n      \"id\": \"e3175fa1-1f42-a358-e22a-c72e3278e649\",\n      \"name\": \"-p{{.}-pp...-.pp -.{}Lp{L   L-}-{-}Lpp{' }ppp-L{ .'{-{'\",\n      \"updatedAt\": \"2022-08-18T14:51:43.232Z\"\n    },\n    {\n      \"createdAt\": \"2019-09-08T08:36:28.649Z\",\n      \"email\": \"<email>\",\n      \"id\": \"5c8984a2-4649-55bb-a01f-09c39fdac02f\",\n      \"name\": \"p-}. p}.{.  .Lppp'p.---{' '{. '.-L-'pL Lpp{L{ {..p'-} .p}--\",\n      \"updatedAt\": \"1977-04-12T22:03:54.792Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f8f4fc0e-15c8-4723-8092-abd72ea75f45",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d49d8209-a5ee-452d-a130-894c63ecc99e",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /authorizations for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `authorizations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"authorizations\")){\n            if(responseData.authorizations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"authorizations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `authorizations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"authorizations\");  \n          let authorizationsArray = _.get(responseData, \"authorizations\", \"\");  \n          for (let i = 0; i < authorizationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'authorizations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"id\")){\n          if(responseData.authorizations[i].id != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('authorizations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'name' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"name\")){\n          if(responseData.authorizations[i].name != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].name`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test(`${i} element of array 'authorizations' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"email\")){\n          if(responseData.authorizations[i].email != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.authorizations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.authorizations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        null,
        null
      ],
      "event": []
    },
    {
      "id": "4ff27559-1d41-44ef-8104-7972e4084b62",
      "name": "apikeys",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "fa1199e7-10a3-436c-a870-014e240e6236",
      "name": "recipients",
      "item": [
        {
          "id": "eda7bd2c-c1ce-4b09-b306-df8cff379641",
          "name": "branches",
          "item": [
            null,
            null,
            {
              "id": "650664f1-2286-4a62-8ea5-6dab0f5e540e",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "b756fa75-cf25-44db-a7ff-5baac2b674c7",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "5566e8f1-8f0a-4680-a72b-9661445e9dff",
          "name": "persons",
          "item": [
            null,
            null,
            {
              "id": "1b943ee3-227f-4b50-9590-26a33e580e8c",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "f7285254-5d20-46ac-8572-b57d98644b18",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "2ea40a3a-faad-4b35-8fc5-896419d09e95",
      "name": "registrations",
      "item": [
        null,
        {
          "id": "59338043-024b-419a-a525-b0e9c4aa17b4",
          "name": "{id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    null
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "2a9164a8-e704-42c8-90b2-dc97750f8cd2",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}