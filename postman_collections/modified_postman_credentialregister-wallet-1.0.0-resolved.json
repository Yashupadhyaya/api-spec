{
  "item": [
    {
      "id": "e22354c9-d612-43c2-aede-5c1c5e1eac77",
      "name": "accounts",
      "item": [
        null,
        null
      ],
      "event": []
    },
    null,
    null,
    {
      "id": "07bc149b-016a-4139-89ef-6281e7245e24",
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "id": "8d73e6f8-59b3-48b8-b8ea-c4daf3afefd7",
      "name": "credentials",
      "item": [
        null,
        {
          "id": "a5453d95-fa2a-469e-b083-78fea4e47138",
          "name": "{id}",
          "item": [
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "id": "4b038412-5a1e-4e39-ba41-b9ddf956b171",
      "name": "authorizations",
      "item": [
        {
          "id": "11e2d04d-70c7-4139-abe0-924c2cfd8e7d",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "16f7a185-5fb7-4c8c-923d-0f188c9a282e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"2011-12-11T09:03:48.693Z\",\n      \"email\": \"<email>\",\n      \"id\": \"4d3e01a3-7fc5-fe22-20de-4719449e4bc4\",\n      \"name\": \"{L.L.' {p- }'}'.- }L'.{ - {{p-} LLLLLp{ L}pL{} p'L-.} . } p{'p{ {- .{'L. }.'.'{\",\n      \"updatedAt\": \"1962-02-28T15:14:24.230Z\"\n    },\n    {\n      \"createdAt\": \"1974-11-04T10:11:50.780Z\",\n      \"email\": \"<email>\",\n      \"id\": \"05492ee3-0025-1061-13f7-1ddcaa14c418\",\n      \"name\": \"'L}'{. {.}L---p.}Lp'p...{.}' .' .{p-{\",\n      \"updatedAt\": \"1994-07-22T04:18:25.842Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9d614fcd-c4ba-4963-87e2-e73717a342e8",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7cf72e61-71a3-42e6-8d5b-f522dce9a5f0",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /authorizations for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `authorizations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"authorizations\")){\n            if(responseData.authorizations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"authorizations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `authorizations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"authorizations\");  \n          let authorizationsArray = _.get(responseData, \"authorizations\", \"\");  \n          for (let i = 0; i < authorizationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'authorizations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"id\")){\n          if(responseData.authorizations[i].id != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('authorizations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'name' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"name\")){\n          if(responseData.authorizations[i].name != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].name`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test(`${i} element of array 'authorizations' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"email\")){\n          if(responseData.authorizations[i].email != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.authorizations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.authorizations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        null,
        null
      ],
      "event": []
    },
    {
      "id": "2d6babc9-0137-4fbd-abbe-4e8a58b5fe09",
      "name": "apikeys",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "5dd8fb15-665c-4e6e-bbe8-9de95cc5cf86",
      "name": "recipients",
      "item": [
        {
          "id": "53e99438-2168-493e-8e4c-dcbf0fe2d17a",
          "name": "branches",
          "item": [
            null,
            null,
            {
              "id": "460db1fc-ce06-41fb-ad84-415447ccebf7",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "28a73e46-70d0-45ff-9fc5-b9070848e44c",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "c339dd7b-aded-4009-ad47-184379c2cb1a",
          "name": "persons",
          "item": [
            null,
            null,
            {
              "id": "764658a5-d1f9-4c05-a886-9b5378b173b3",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "833b3143-e73d-4c46-8bb8-a78873e5380e",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "68e0b066-9559-4848-a36b-cef56ca8ac48",
      "name": "registrations",
      "item": [
        null,
        {
          "id": "33d53b76-479f-41e6-bfd4-dee68222b245",
          "name": "{id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    null
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "b6e90ca3-cdf3-4e7f-bc48-002886886e99",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}