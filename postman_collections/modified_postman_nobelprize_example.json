{
  "item": [
    {
      "id": "1334ff81-761c-4634-bcee-856e443796aa",
      "name": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
      "request": {
        "name": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
        "description": {
          "content": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "nobelPrizes"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "offset",
              "value": "{{offset}}",
              "description": "The number of items to skip before starting to collect the result set"
            },
            {
              "disabled": false,
              "key": "limit",
              "value": "{{limit}}",
              "description": "The numbers of items to return"
            },
            {
              "disabled": false,
              "key": "sort",
              "value": "{{sort}}",
              "description": "The sort order (result is sorted by year)"
            },
            {
              "disabled": false,
              "key": "nobelPrizeYear",
              "value": "{{nobelPrizeYear}}",
              "description": "Year the Nobel Prize was awarded, in the form of YYYY"
            },
            {
              "disabled": false,
              "key": "yearTo",
              "value": "{{yearTo}}",
              "description": "Used in combination with nobelPrizeYear to specify a range of years to return results from. NobelPrizeYear is required"
            },
            {
              "disabled": false,
              "key": "nobelPrizeCategory",
              "value": "{{nobelPrizeCategory}}",
              "description": "Nobel Prize category"
            },
            {
              "disabled": false,
              "key": "format",
              "value": "{{format}}",
              "description": "Format of output (Default = json)"
            },
            {
              "disabled": false,
              "key": "csvLang",
              "value": "{{csvLang}}",
              "description": "Language of output if format is csv (Default = en)"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "cc5380d3-0b40-43e8-88c7-0093febffd2f",
          "name": "Successful call of Nobel Prize(s) according to the filled fields",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"nobelPrizes\": [\n    {\n      \"awardYear\": 1989,\n      \"category\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"categoryFullName\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"dateAwarded\": \"2015-11-12\",\n      \"prizeAmount\": 1000000,\n      \"prizeAmountAdjusted\": 1000000,\n      \"topMotivation\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"laureates\": [\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"awardYear\": 1989,\n      \"category\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"categoryFullName\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"dateAwarded\": \"2015-11-12\",\n      \"prizeAmount\": 1000000,\n      \"prizeAmountAdjusted\": 1000000,\n      \"topMotivation\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"laureates\": [\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"rel\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"href\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"action\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"types\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"meta\": {\n    \"offset\": -37355740,\n    \"limit\": 91263270,\n    \"nobelPrizeYear\": 53880237,\n    \"yearTo\": -92070562,\n    \"nobelPrizeCategory\": \"eco\",\n    \"count\": 85946694\n  },\n  \"links\": [\n    {\n      \"first\": \"nulla commodo\",\n      \"prev\": \"dolor non commodo\",\n      \"self\": \"quis\",\n      \"next\": \"voluptate est Ut sint\",\n      \"last\": \"qui culpa ad Lorem\"\n    },\n    {\n      \"first\": \"laboris cillum\",\n      \"prev\": \"eiusmod labore do esse\",\n      \"self\": \"fugiat esse incididunt ut aute\",\n      \"next\": \"irure\",\n      \"last\": \"pariatur occaecat nisi et magna\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "4d8ef82f-f818-4605-8ada-89406b62ceb1",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "45ace2f2-2c87-4f32-a0e8-d1cae047ffa5",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c975fc18-1c04-4167-be89-b5943deea3f2",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test test-postman1 using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /nobelPrizes?offset=<integer>&limit=<integer>&sort=<string>&nobelPrizeYear=<integer>&yearTo=<integer>&nobelPrizeCategory=<string>&format=<string>&csvLang=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Nobel Prize(s) according to the filled fields\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `nobelPrizes` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(\"nobelPrizes\")){\n              if(responseData[0].nobelPrizes!=null){\n                pm.expect(Array.isArray(_.get(responseData[0], \"nobelPrizes\"))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `nobelPrizes` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(\"nobelPrizes\")){\n              if(responseData.nobelPrizes!=null){\n                pm.expect(Array.isArray(_.get(responseData, \"nobelPrizes\"))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the nobelPrizes field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes`);\n          let nobelPrizesArray = _.get(pm.response.json(), `nobelPrizes`, \"\");\n          for (let nobelPrizes_it = 0; nobelPrizes_it < nobelPrizesArray.length; nobelPrizes_it++) {\n            let iterator = nobelPrizes_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray' has 'awardYear' as number`,function(){  \n              if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].awardYear[i]).to.have.nested.property(\"awardYear\")){\n                if(responseData[0].nobelPrizes[${nobelPrizes_it}].awardYear[i].awardYear != null ){\n                  pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].awardYear[{iterator}].awardYear`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray' has 'awardYear' as number`,function(){  \n              if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].awardYear[i]).to.have.nested.property(\"awardYear\")){\n                if(responseData.nobelPrizes[${nobelPrizes_it}].awardYear[i].awardYear != null ){\n                  pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].awardYear[{iterator}].awardYear`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'category' as 'object'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].category[i]).to.have.nested.property(\"category\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].category[i].category != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category[{iterator}].category`, \"\")).to.equal(\"object\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category' has 'category' as 'object'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].category[i]).to.have.nested.property(\"category\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].category[i].category != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].category[{iterator}].category`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].category.en[i]).to.have.nested.property(\"en\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].category.en[i].en != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category.en[{iterator}].en`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].category.en[i]).to.have.nested.property(\"en\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].category.en[i].en != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].category.en[{iterator}].en`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].category.se[i]).to.have.nested.property(\"se\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].category.se[i].se != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category.se[{iterator}].se`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].category.se[i]).to.have.nested.property(\"se\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].category.se[i].se != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].category.se[{iterator}].se`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].category.false[i]).to.have.nested.property(\"false\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].category.false[i].false != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category.false[{iterator}].false`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].category.false[i]).to.have.nested.property(\"false\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].category.false[i].false != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].category.false[{iterator}].false`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'categoryFullName' as 'object'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName[i]).to.have.nested.property(\"categoryFullName\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName[i].categoryFullName != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName[{iterator}].categoryFullName`, \"\")).to.equal(\"object\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName' has 'categoryFullName' as 'object'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName[i]).to.have.nested.property(\"categoryFullName\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName[i].categoryFullName != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].categoryFullName[{iterator}].categoryFullName`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName.en[i]).to.have.nested.property(\"en\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName.en[i].en != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName.en[{iterator}].en`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName.en[i]).to.have.nested.property(\"en\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName.en[i].en != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].categoryFullName.en[{iterator}].en`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName.se[i]).to.have.nested.property(\"se\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName.se[i].se != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName.se[{iterator}].se`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName.se[i]).to.have.nested.property(\"se\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName.se[i].se != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].categoryFullName.se[{iterator}].se`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName.false[i]).to.have.nested.property(\"false\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].categoryFullName.false[i].false != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName.false[{iterator}].false`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName.false[i]).to.have.nested.property(\"false\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].categoryFullName.false[i].false != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].categoryFullName.false[{iterator}].false`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'dateAwarded' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].dateAwarded[i]).to.have.nested.property(\"dateAwarded\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].dateAwarded[i].dateAwarded != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].dateAwarded[{iterator}].dateAwarded`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].dateAwarded' has 'dateAwarded' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].dateAwarded[i]).to.have.nested.property(\"dateAwarded\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].dateAwarded[i].dateAwarded != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].dateAwarded[{iterator}].dateAwarded`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n  \n            pm.test('nobelPrizes[${nobelPrizes_it}].dateAwarded format to be date',function(){\n                pm.expect(_.get(responseData, \"nobelPrizes[${nobelPrizes_it}].dateAwarded\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray' has 'prizeAmount' as number`,function(){  \n              if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].prizeAmount[i]).to.have.nested.property(\"prizeAmount\")){\n                if(responseData[0].nobelPrizes[${nobelPrizes_it}].prizeAmount[i].prizeAmount != null ){\n                  pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].prizeAmount[{iterator}].prizeAmount`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray' has 'prizeAmount' as number`,function(){  \n              if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].prizeAmount[i]).to.have.nested.property(\"prizeAmount\")){\n                if(responseData.nobelPrizes[${nobelPrizes_it}].prizeAmount[i].prizeAmount != null ){\n                  pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].prizeAmount[{iterator}].prizeAmount`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray' has 'prizeAmountAdjusted' as number`,function(){  \n              if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted[i]).to.have.nested.property(\"prizeAmountAdjusted\")){\n                if(responseData[0].nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted[i].prizeAmountAdjusted != null ){\n                  pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted[{iterator}].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray' has 'prizeAmountAdjusted' as number`,function(){  \n              if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted[i]).to.have.nested.property(\"prizeAmountAdjusted\")){\n                if(responseData.nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted[i].prizeAmountAdjusted != null ){\n                  pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted[{iterator}].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'topMotivation' as 'object'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation[i]).to.have.nested.property(\"topMotivation\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation[i].topMotivation != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation[{iterator}].topMotivation`, \"\")).to.equal(\"object\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation' has 'topMotivation' as 'object'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation[i]).to.have.nested.property(\"topMotivation\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation[i].topMotivation != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].topMotivation[{iterator}].topMotivation`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation.en[i]).to.have.nested.property(\"en\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation.en[i].en != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation.en[{iterator}].en`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation.en[i]).to.have.nested.property(\"en\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation.en[i].en != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].topMotivation.en[{iterator}].en`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation.se[i]).to.have.nested.property(\"se\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation.se[i].se != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation.se[{iterator}].se`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation.se[i]).to.have.nested.property(\"se\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation.se[i].se != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].topMotivation.se[{iterator}].se`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation.false[i]).to.have.nested.property(\"false\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].topMotivation.false[i].false != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation.false[{iterator}].false`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation.false[i]).to.have.nested.property(\"false\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].topMotivation.false[i].false != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].topMotivation.false[{iterator}].false`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'laureates' as an array`,function(){ \n            if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[i]).to.have.nested.property(\"laureates\")){\n              if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[i].laureates != null){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[{iterator}].laureates`))).to.equal(true);\n              }\n            }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'laureates' as an array`,function(){ \n            if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[i]).to.have.nested.property(\"laureates\")){\n              if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[i].laureates != null){\n                pm.expect(Array.isArray(_.get(responseData, `nobelPrizes[${nobelPrizes_it}].laureates[{iterator}].laureates`))).to.equal(true);\n              }\n            }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the nobelPrizes[${nobelPrizes_it}].laureates field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes[${nobelPrizes_it}].laureates`);\n          let laureatesArray = _.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates`, \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; laureates_it++) {\n            let iterator = laureates_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'laureatesArray' has 'id' as number`,function(){  \n              if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id[i]).to.have.nested.property(\"id\")){\n                if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id[i].id != null ){\n                  pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id[{iterator}].id`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n          } else {\n            pm.test(`${iterator} element of array 'laureatesArray' has 'id' as number`,function(){  \n              if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id[i]).to.have.nested.property(\"id\")){\n                if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id[i].id != null ){\n                  pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id[{iterator}].id`, 200)).to.equal(\"number\");\n                }\n              }   \n            })\n\n          }\n  \n        pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id`, \"\")).to.be.at.least(1);\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'name' as 'object'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name[i]).to.have.nested.property(\"name\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name[i].name != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name[{iterator}].name`, \"\")).to.equal(\"object\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name' has 'name' as 'object'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name[i]).to.have.nested.property(\"name\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name[i].name != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name[{iterator}].name`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en[i]).to.have.nested.property(\"en\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en[i].en != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en[{iterator}].en`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en[i]).to.have.nested.property(\"en\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en[i].en != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en[{iterator}].en`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se[i]).to.have.nested.property(\"se\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se[i].se != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se[{iterator}].se`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se[i]).to.have.nested.property(\"se\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se[i].se != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se[{iterator}].se`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false[i]).to.have.nested.property(\"false\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false[i].false != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false[{iterator}].false`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false[i]).to.have.nested.property(\"false\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false[i].false != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false[{iterator}].false`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'portion' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion[i]).to.have.nested.property(\"portion\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion[i].portion != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion[{iterator}].portion`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion' has 'portion' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion[i]).to.have.nested.property(\"portion\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion[i].portion != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion[{iterator}].portion`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n \n        pm.test('nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion\", \"\")).to.include.oneOf([\"1\",\"1/2\",\"1/3\",\"1/4\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sortOrder' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder[i]).to.have.nested.property(\"sortOrder\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder[i].sortOrder != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder[{iterator}].sortOrder`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder' has 'sortOrder' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder[i]).to.have.nested.property(\"sortOrder\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder[i].sortOrder != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder[{iterator}].sortOrder`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n \n        pm.test('nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder\", \"\")).to.include.oneOf([\"1\",\"2\",\"3\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'motivation' as 'object'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation[i]).to.have.nested.property(\"motivation\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation[i].motivation != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation[{iterator}].motivation`, \"\")).to.equal(\"object\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation' has 'motivation' as 'object'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation[i]).to.have.nested.property(\"motivation\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation[i].motivation != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation[{iterator}].motivation`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en[i]).to.have.nested.property(\"en\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en[i].en != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en[{iterator}].en`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en[i]).to.have.nested.property(\"en\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en[i].en != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en[{iterator}].en`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se[i]).to.have.nested.property(\"se\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se[i].se != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se[{iterator}].se`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se[i]).to.have.nested.property(\"se\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se[i].se != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se[{iterator}].se`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false[i]).to.have.nested.property(\"false\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false[i].false != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false[{iterator}].false`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false[i]).to.have.nested.property(\"false\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false[i].false != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false[{iterator}].false`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n            if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[i]).to.have.nested.property(\"links\")){\n              if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[i].links != null){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[{iterator}].links`))).to.equal(true);\n              }\n            }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n            if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[i]).to.have.nested.property(\"links\")){\n              if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[i].links != null){\n                pm.expect(Array.isArray(_.get(responseData, `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[{iterator}].links`))).to.equal(true);\n              }\n            }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`);\n          let linksArray = _.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel[i]).to.have.nested.property(\"rel\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel[i].rel != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel[{iterator}].rel`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel' has 'rel' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel[i]).to.have.nested.property(\"rel\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel[i].rel != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel[{iterator}].rel`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href[i]).to.have.nested.property(\"href\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href[i].href != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href[{iterator}].href`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href' has 'href' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href[i]).to.have.nested.property(\"href\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href[i].href != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href[{iterator}].href`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action[i]).to.have.nested.property(\"action\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action[i].action != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action[{iterator}].action`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action' has 'action' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action[i]).to.have.nested.property(\"action\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action[i].action != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action[{iterator}].action`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){ \n          if(pm.expect(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types[i]).to.have.nested.property(\"types\")){\n            if(responseData[0].nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types[i].types != null){\n              pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types[{iterator}].types`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types' has 'types' as 'string'`,function(){ \n          if(pm.expect(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types[i]).to.have.nested.property(\"types\")){\n          if(responseData.nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types[i].types != null){\n            pm.expect(typeof _.get(responseData,`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types[{iterator}].types`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n          }\n\n      })\n\n          }\n\n      })\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"meta\")){\n          if(responseData[0].meta!=null){\n            pm.expect(typeof _.get(responseData[0], \"meta\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta`)){\n          if(pm.expect(_.get(pm.response.json(), `meta`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n              pm.test('Response has the `meta.offset` field',function(){\n                if(pm.expect(responseData[0]).to.have.nested.property(\"meta.offset\")){\n                  if(responseData[0].meta.offset!=null){\n                    pm.expect(typeof _.get(responseData[0], \"meta.offset\", 200)).to.equal(\"number\");\n                  }\n                }\n\n              })\n          } else {\n            pm.test('Response has the `meta.offset` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(\"meta.offset\")){\n                if(responseData.meta.offset!=null){\n                  pm.expect(typeof _.get(responseData, \"meta.offset\", 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n              pm.test('Response has the `meta.limit` field',function(){\n                if(pm.expect(responseData[0]).to.have.nested.property(\"meta.limit\")){\n                  if(responseData[0].meta.limit!=null){\n                    pm.expect(typeof _.get(responseData[0], \"meta.limit\", 200)).to.equal(\"number\");\n                  }\n                }\n\n              })\n          } else {\n            pm.test('Response has the `meta.limit` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(\"meta.limit\")){\n                if(responseData.meta.limit!=null){\n                  pm.expect(typeof _.get(responseData, \"meta.limit\", 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n  \n        pm.expect(_.get(pm.response.json(), `meta.limit`, \"\")).to.be.at.least(1);\n\n          if(Array.isArray(responseData)) {\n              pm.test('Response has the `meta.nobelPrizeYear` field',function(){\n                if(pm.expect(responseData[0]).to.have.nested.property(\"meta.nobelPrizeYear\")){\n                  if(responseData[0].meta.nobelPrizeYear!=null){\n                    pm.expect(typeof _.get(responseData[0], \"meta.nobelPrizeYear\", 200)).to.equal(\"number\");\n                  }\n                }\n\n              })\n          } else {\n            pm.test('Response has the `meta.nobelPrizeYear` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(\"meta.nobelPrizeYear\")){\n                if(responseData.meta.nobelPrizeYear!=null){\n                  pm.expect(typeof _.get(responseData, \"meta.nobelPrizeYear\", 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n              pm.test('Response has the `meta.yearTo` field',function(){\n                if(pm.expect(responseData[0]).to.have.nested.property(\"meta.yearTo\")){\n                  if(responseData[0].meta.yearTo!=null){\n                    pm.expect(typeof _.get(responseData[0], \"meta.yearTo\", 200)).to.equal(\"number\");\n                  }\n                }\n\n              })\n          } else {\n            pm.test('Response has the `meta.yearTo` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(\"meta.yearTo\")){\n                if(responseData.meta.yearTo!=null){\n                  pm.expect(typeof _.get(responseData, \"meta.yearTo\", 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"meta.nobelPrizeCategory\")){\n          if(responseData[0].meta.nobelPrizeCategory!=null){\n            pm.expect(typeof _.get(responseData[0], \"meta.nobelPrizeCategory\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.nobelPrizeCategory`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.nobelPrizeCategory`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.nobelPrizeCategory`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n              pm.test('Response has the `meta.count` field',function(){\n                if(pm.expect(responseData[0]).to.have.nested.property(\"meta.count\")){\n                  if(responseData[0].meta.count!=null){\n                    pm.expect(typeof _.get(responseData[0], \"meta.count\", 200)).to.equal(\"number\");\n                  }\n                }\n\n              })\n          } else {\n            pm.test('Response has the `meta.count` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(\"meta.count\")){\n                if(responseData.meta.count!=null){\n                  pm.expect(typeof _.get(responseData, \"meta.count\", 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `links` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(\"links\")){\n              if(responseData[0].links!=null){\n                pm.expect(Array.isArray(_.get(responseData[0], \"links\"))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `links` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(\"links\")){\n              if(responseData.links!=null){\n                pm.expect(Array.isArray(_.get(responseData, \"links\"))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`links`);\n          let linksArray = _.get(pm.response.json(), `links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'first' as 'string'`,function(){ \n          if(pm.expect(responseData[0].links[${links_it}].first[i]).to.have.nested.property(\"first\")){\n            if(responseData[0].links[${links_it}].first[i].first != null){\n              pm.expect(typeof _.get(responseData[0],`links[${links_it}].first[{iterator}].first`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].first' has 'first' as 'string'`,function(){ \n          if(pm.expect(responseData.links[${links_it}].first[i]).to.have.nested.property(\"first\")){\n          if(responseData.links[${links_it}].first[i].first != null){\n            pm.expect(typeof _.get(responseData,`links[${links_it}].first[{iterator}].first`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'prev' as 'string'`,function(){ \n          if(pm.expect(responseData[0].links[${links_it}].prev[i]).to.have.nested.property(\"prev\")){\n            if(responseData[0].links[${links_it}].prev[i].prev != null){\n              pm.expect(typeof _.get(responseData[0],`links[${links_it}].prev[{iterator}].prev`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].prev' has 'prev' as 'string'`,function(){ \n          if(pm.expect(responseData.links[${links_it}].prev[i]).to.have.nested.property(\"prev\")){\n          if(responseData.links[${links_it}].prev[i].prev != null){\n            pm.expect(typeof _.get(responseData,`links[${links_it}].prev[{iterator}].prev`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'self' as 'string'`,function(){ \n          if(pm.expect(responseData[0].links[${links_it}].self[i]).to.have.nested.property(\"self\")){\n            if(responseData[0].links[${links_it}].self[i].self != null){\n              pm.expect(typeof _.get(responseData[0],`links[${links_it}].self[{iterator}].self`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].self' has 'self' as 'string'`,function(){ \n          if(pm.expect(responseData.links[${links_it}].self[i]).to.have.nested.property(\"self\")){\n          if(responseData.links[${links_it}].self[i].self != null){\n            pm.expect(typeof _.get(responseData,`links[${links_it}].self[{iterator}].self`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'next' as 'string'`,function(){ \n          if(pm.expect(responseData[0].links[${links_it}].next[i]).to.have.nested.property(\"next\")){\n            if(responseData[0].links[${links_it}].next[i].next != null){\n              pm.expect(typeof _.get(responseData[0],`links[${links_it}].next[{iterator}].next`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].next' has 'next' as 'string'`,function(){ \n          if(pm.expect(responseData.links[${links_it}].next[i]).to.have.nested.property(\"next\")){\n          if(responseData.links[${links_it}].next[i].next != null){\n            pm.expect(typeof _.get(responseData,`links[${links_it}].next[{iterator}].next`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'last' as 'string'`,function(){ \n          if(pm.expect(responseData[0].links[${links_it}].last[i]).to.have.nested.property(\"last\")){\n            if(responseData[0].links[${links_it}].last[i].last != null){\n              pm.expect(typeof _.get(responseData[0],`links[${links_it}].last[{iterator}].last`, \"\")).to.equal(\"string\");\n            }\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].last' has 'last' as 'string'`,function(){ \n          if(pm.expect(responseData.links[${links_it}].last[i]).to.have.nested.property(\"last\")){\n          if(responseData.links[${links_it}].last[i].last != null){\n            pm.expect(typeof _.get(responseData,`links[${links_it}].last[{iterator}].last`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"code\")){\n          if(responseData[0].code!=null){\n            pm.expect(typeof _.get(responseData[0], \"code\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"message\")){\n          if(responseData[0].message!=null){\n            pm.expect(typeof _.get(responseData[0], \"message\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"code\")){\n          if(responseData[0].code!=null){\n            pm.expect(typeof _.get(responseData[0], \"code\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"message\")){\n          if(responseData[0].message!=null){\n            pm.expect(typeof _.get(responseData[0], \"message\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"code\")){\n          if(responseData[0].code!=null){\n            pm.expect(typeof _.get(responseData[0], \"code\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(\"message\")){\n          if(responseData[0].message!=null){\n            pm.expect(typeof _.get(responseData[0], \"message\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://api.nobelprize.org/2.1",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "09e9a1e5-f25f-4a7a-89eb-8f9e86b092db",
    "name": "Nobel Prize Master Data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Information about the Nobel Prizes and the Nobel Prize Laureates",
      "type": "text/plain"
    }
  }
}