{
  "item": [
    {
      "id": "e2fc567b-0216-4267-b883-5f6675019e68",
      "name": "/get-cart/:id",
      "request": {
        "name": "/get-cart/:id",
        "description": {},
        "url": {
          "path": [
            "get-cart",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "disabled": false,
            "key": "email",
            "value": "{{email}}",
            "description": ""
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "9f6a38f3-ba2d-4c26-946a-eb15433d36f1",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "email",
                "value": "{{email}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "8fd787a6-09bc-4b70-a086-74678eb0ee13",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "email",
                "value": "{{email}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "8708214b-d7bd-445c-b3e1-d7efb794abf5",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "email",
                "value": "{{email}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "2ac28954-adef-4db2-aa45-95b48ffdb690",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "email",
                "value": "{{email}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "9de0b90a-2851-4aa3-81ae-ae445fa4bef7",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "email",
                "value": "{{email}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /get-cart/:id for http method type get in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "405b5b53-4247-4cde-b108-ea533db8a2fa",
      "name": "/checkout-cart-authenticated/:id",
      "request": {
        "name": "/checkout-cart-authenticated/:id",
        "description": {},
        "url": {
          "path": [
            "checkout-cart-authenticated",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "d969c4d9-94e3-4803-bd3b-ada837f2c9ef",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"c6cc6903-a7b0-681d-1255-d4d583c7da3b\",\n  \"language\": \"Ut in ex\",\n  \"currency\": \"NOK\",\n  \"price\": {\n    \"currency\": \"NOK\",\n    \"value\": 51597176.11723167,\n    \"available\": false\n  },\n  \"journeyType\": \"CRUISE\",\n  \"passengers\": [\n    {\n      \"code\": \"INFANT\",\n      \"quantity\": -89443212\n    },\n    {\n      \"code\": \"BABY\",\n      \"quantity\": 35553413\n    }\n  ],\n  \"contactPerson\": {\n    \"contactInfo\": {\n      \"address\": \"et ad proident\",\n      \"city\": \"deserunt irure esse\",\n      \"country\": \"MZ\",\n      \"email\": \"veniam consequat\",\n      \"mobile\": \"Duis fugiat qui\",\n      \"zip\": \"in adipisicing sint\"\n    },\n    \"birthYear\": 28058583,\n    \"birthMonth\": 773360,\n    \"birthDay\": 19477517,\n    \"firstName\": \"sit tempor ex laborum\",\n    \"lastName\": \"consequat minim adipisicing c\",\n    \"memberNumber\": \"proident in \",\n    \"redeemableClubPoints\": -53031076.19175154,\n    \"customerCode\": \"adipis\",\n    \"gender\": \"UNKNOWN\",\n    \"nationality\": \"RS\"\n  },\n  \"passengerDetails\": [\n    {\n      \"contactInfo\": {\n        \"address\": \"pariatur amet in consequat\",\n        \"city\": \"commodo pariatur minim sunt\",\n        \"country\": \"HK\",\n        \"email\": \"et ad commodo\",\n        \"mobile\": \"id amet qui\",\n        \"zip\": \"incididunt cupidatat officia ut\"\n      },\n      \"birthYear\": 32043880,\n      \"birthMonth\": -97458208,\n      \"birthDay\": 10452009,\n      \"firstName\": \"velit\",\n      \"lastName\": \"ut in\",\n      \"memberNumber\": \"reprehenderit aliquip occaecat\",\n      \"redeemableClubPoints\": -99463101.21096551,\n      \"customerCode\": \"consectetur ipsum reprehenderit\",\n      \"gender\": \"UNSPECIFIED\",\n      \"nationality\": \"BN\",\n      \"disabledPerson\": false,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"veniam dolore\"\n      },\n      \"code\": \"ADULT\",\n      \"uuid\": \"adipisicing irure fugiat eiusmod quis\",\n      \"bookedItemReference\": \"consectetu\"\n    },\n    {\n      \"contactInfo\": {\n        \"address\": \"voluptate Ut deserunt laborum\",\n        \"city\": \"ipsum Excepteur do\",\n        \"country\": \"ST\",\n        \"email\": \"culpa officia dolor minim\",\n        \"mobile\": \"anim minim\",\n        \"zip\": \"labore minim aliquip\"\n      },\n      \"birthYear\": 48644659,\n      \"birthMonth\": 88452422,\n      \"birthDay\": 82543692,\n      \"firstName\": \"irure esse sint dolore\",\n      \"lastName\": \"deserunt aute non\",\n      \"memberNumber\": \"proident adipisicing ut\",\n      \"redeemableClubPoints\": -27466080.550143793,\n      \"customerCode\": \"labore voluptate sed\",\n      \"gender\": \"FEMALE\",\n      \"nationality\": \"MQ\",\n      \"disabledPerson\": false,\n      \"id\": {\n        \"idType\": \"PASSPORT\",\n        \"idNumber\": \"aute\"\n      },\n      \"code\": \"ADULT\",\n      \"uuid\": \"laboris magna a\",\n      \"bookedItemReference\": \"o\"\n    }\n  ],\n  \"outbound\": {\n    \"journeyCode\": \"ut aliquip dolor\",\n    \"arrivalPort\": \"SESMD\",\n    \"secondArrivalPort\": \"NOLAD\",\n    \"departureCode\": \"in dolore exercitation esse\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"SESMD\",\n    \"departureDate\": \"1954-06-17T10:08:19.185Z\",\n    \"arrivalDate\": \"1954-06-04T10:30:23.148Z\",\n    \"ticket\": {\n      \"fareType\": \"CRUISE_ONBOARD\",\n      \"ticketCode\": \"ut fugiat\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"BABY\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 13423301.407490134,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"BABY\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -64001481.90249974,\n          \"available\": false\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"veniam\",\n        \"edit\": \"n\",\n        \"id\": \"pariatur ex ad\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -10529800.986774296,\n          \"available\": false\n        },\n        \"quantityInCabin\": 49647234,\n        \"subCode\": \"qui quis ipsum amet labore\",\n        \"bookedItemReference\": \"officia\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"esse Excepteur\",\n        \"edit\": \"in nisi incididunt nulla consequat\",\n        \"id\": \"pariatur amet Excepteur proident sed\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 56905462.11596739,\n          \"available\": true\n        },\n        \"quantityInCabin\": -7969533,\n        \"subCode\": \"in dolor deserunt velit\",\n        \"bookedItemReference\": \"consectetur deserunt\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"in Lorem\",\n        \"quantity\": 25854547,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 52316309.76563677,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"officia\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"culpa aliquip est\",\n        \"startTime\": \"1975-05-04T04:04:48.102Z\"\n      },\n      {\n        \"code\": \"cillum\",\n        \"quantity\": 2931094,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 71488850.36374474,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"commodo cupidatat eiusmod\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"deserunt dolor est Duis veniam\",\n        \"startTime\": \"1977-05-12T16:00:43.126Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"eiusmod incididunt velit nisi\",\n        \"quantity\": 75146130,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 16436674.303329155,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"fugiat esse adipisicing sint velit\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"in minim nisi incididunt\",\n        \"startTime\": \"1998-07-08T13:33:38.306Z\"\n      },\n      {\n        \"code\": \"amet nostrud\",\n        \"quantity\": 39604209,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -47486516.11564587,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"occaecat in ex est\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"laborum in qui velit\",\n        \"startTime\": \"1961-11-25T02:16:20.340Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"voluptate laborum\",\n        \"quantity\": 19298128,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -17972381.028743595,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"Ut\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"nostrud cillum\",\n        \"startTime\": \"1978-08-10T07:29:48.001Z\"\n      },\n      {\n        \"code\": \"consequat\",\n        \"quantity\": 41755022,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 53742461.81055966,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"nisi anim laborum\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ut sit anim ex\",\n        \"startTime\": \"1992-02-18T05:12:52.512Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"fugiat \",\n        \"quantity\": -32089087,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -72212241.74767374,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"Lorem Ut sunt\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Ut dolor\",\n        \"startTime\": \"1949-01-04T13:48:57.708Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"elit eu\"\n      },\n      {\n        \"code\": \"cillum officia\",\n        \"quantity\": -61049489,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 42127230.361866236,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"reprehenderit velit amet dolore proident\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"deserunt nulla\",\n        \"startTime\": \"1974-06-22T23:30:54.948Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"dolore eu\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"enim magna in ut dolore\",\n        \"quantity\": 79729031,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -52994016.38014718,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"incididunt dolore sed Ut commodo\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"officia deserunt enim ut\",\n        \"length\": -76303575.64741592,\n        \"hasTrailer\": true,\n        \"id\": \"deserunt magna cupidatat\"\n      },\n      {\n        \"code\": \"dolor nulla\",\n        \"quantity\": -55472226,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -85604285.96480808,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"se\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"esse Lorem in do\",\n        \"length\": -304339.8741724491,\n        \"hasTrailer\": false,\n        \"id\": \"consequat cillum occaecat\"\n      }\n    ],\n    \"vesselCode\": \"ut enim Duis non in\"\n  },\n  \"inbound\": {\n    \"journeyCode\": \"labore culpa incididunt sed\",\n    \"arrivalPort\": \"NOKRS\",\n    \"secondArrivalPort\": \"NOKRS\",\n    \"departureCode\": \"eu sed\",\n    \"departurePort\": \"NOSVG\",\n    \"secondDeparturePort\": \"NOLAD\",\n    \"departureDate\": \"1969-06-08T22:44:10.031Z\",\n    \"arrivalDate\": \"1993-11-27T19:28:47.029Z\",\n    \"ticket\": {\n      \"fareType\": \"CRUISE_ONBOARD\",\n      \"ticketCode\": \"cupidatat\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -78598838.82342377,\n          \"available\": true\n        }\n      },\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 35254094.632973254,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"cillum\",\n        \"edit\": \"nostrud aliquip ea velit\",\n        \"id\": \"officia irure\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -73762321.72158721,\n          \"available\": false\n        },\n        \"quantityInCabin\": -72296008,\n        \"subCode\": \"est cillum\",\n        \"bookedItemReference\": \"nisi quis ullamco \",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"nisi no\",\n        \"edit\": \"dolore aliqua\",\n        \"id\": \"sint\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -69326648.0533254,\n          \"available\": false\n        },\n        \"quantityInCabin\": -22663011,\n        \"subCode\": \"ut officia lab\",\n        \"bookedItemReference\": \"pariatur in adipisicing dolor\",\n        \"isAttachment\": true\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"sunt ut\",\n        \"quantity\": -19194411,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 74073220.96086365,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolor\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"in\",\n        \"startTime\": \"1985-09-30T01:06:33.650Z\"\n      },\n      {\n        \"code\": \"ex\",\n        \"quantity\": 21328660,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 53162515.143395245,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"irure et\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"nulla exercitation quis\",\n        \"startTime\": \"1967-10-28T00:36:35.137Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"qui in\",\n        \"quantity\": -83775852,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 43049095.4628751,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"id nulla irure laborum quis\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"nostrud consectetur occaecat\",\n        \"startTime\": \"2014-01-17T02:07:19.784Z\"\n      },\n      {\n        \"code\": \"velit officia\",\n        \"quantity\": 11097144,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -78857441.55968668,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"officia ex Ut\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"v\",\n        \"startTime\": \"1978-10-25T20:23:04.696Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"aliqua cupidatat ea dolor\",\n        \"quantity\": -48780009,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 89182200.83347589,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"anim aliqua Duis ut\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ullamco dolore labor\",\n        \"startTime\": \"2009-06-28T10:33:27.139Z\"\n      },\n      {\n        \"code\": \"culpa occaecat Duis\",\n        \"quantity\": -84070339,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -15019176.015281573,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"quis et sunt esse\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"laborum in in\",\n        \"startTime\": \"1975-10-15T05:02:57.987Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"ea occaecat \",\n        \"quantity\": -48983613,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -21611717.30371128,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"in irure sunt nostrud\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"voluptate irure consequat ad quis\",\n        \"startTime\": \"1948-10-27T14:56:10.464Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"ex non\"\n      },\n      {\n        \"code\": \"sunt cillum\",\n        \"quantity\": -35330473,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -53322644.624963365,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"nisi amet\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"commodo exercitation officia enim incididunt\",\n        \"startTime\": \"2009-01-15T16:34:45.678Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"irure in tempo\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"Lorem do aliqua\",\n        \"quantity\": -73460934,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 36019635.46885973,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"veniam enim\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"Ut dolore est occaecat\",\n        \"length\": 170835.39078633487,\n        \"hasTrailer\": false,\n        \"id\": \"est\"\n      },\n      {\n        \"code\": \"qui sed\",\n        \"quantity\": -36983684,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -60370407.24301042,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"Lorem\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"ad aute\",\n        \"length\": -66664508.36141755,\n        \"hasTrailer\": true,\n        \"id\": \"\"\n      }\n    ],\n    \"vesselCode\": \"adipisicing ipsum\"\n  },\n  \"hasVehicle\": true,\n  \"hasPet\": false,\n  \"agencyId\": \"enim\",\n  \"userId\": \"aute velit consequat\",\n  \"connectionId\": \"est nulla laborum nisi\",\n  \"status\": \"ACTIVE\",\n  \"bookingResult\": {\n    \"created\": \"2016-04-22T20:06:04.904Z\",\n    \"bookingCode\": \"commodo eiusmod consequat\",\n    \"bookingState\": \"pariatur magna eiusmod in\",\n    \"bookingBalance\": \"ut velit\",\n    \"bookingTotal\": \"fugiat non tempor\",\n    \"paidState\": \"Ut pariatur\",\n    \"currency\": \"culpa eiusmod laboris\",\n    \"paymentUrl\": \"eiusmod labore tempor sed ex\",\n    \"paymentSessionId\": \"veniam in \",\n    \"bookedItems\": {\n      \"groupPrices\": [\n        {\n          \"name\": \"eiusmod in tempor nulla\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"name\": \"nostrud do dolor veniam\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundPassengerPrices\": [\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"BABY\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"inboundPassengerPrices\": [\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundVehicles\": [\n        {\n          \"code\": \"magna eiusmod proident laboris\",\n          \"quantity\": -7204499,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ea consequat nostrud\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"labore deserunt\",\n          \"length\": -91075749.56882489,\n          \"hasTrailer\": false,\n          \"id\": \"nostrud ipsum pariatur\"\n        },\n        {\n          \"code\": \"ad ullamco dolor\",\n          \"quantity\": 95708990,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"enim\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"tempor mollit eiusmod dolor dolor\",\n          \"length\": 67471758.04868227,\n          \"hasTrailer\": false,\n          \"id\": \"exercitation Duis ipsum et\"\n        }\n      ],\n      \"inboundVehicles\": [\n        {\n          \"code\": \"minim\",\n          \"quantity\": -90024517,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"exercitation q\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"incididunt Excepteur\",\n          \"length\": 36724727.72752902,\n          \"hasTrailer\": false,\n          \"id\": \"Excepteur dolore eiusmod ex\"\n        },\n        {\n          \"code\": \"sit magna fugiat anim\",\n          \"quantity\": 15572039,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sint ea\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"deserunt nisi sint occaecat aliqua\",\n          \"length\": -35302236.20092863,\n          \"hasTrailer\": false,\n          \"id\": \"Duis lab\"\n        }\n      ],\n      \"outboundMeals\": [\n        {\n          \"code\": \"ut in reprehen\",\n          \"quantity\": -1261564,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"in irure in laboris\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"amet irure\",\n          \"startTime\": \"1957-03-20T16:16:41.895Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"labore officia tempor\"\n        },\n        {\n          \"code\": \"qui velit\",\n          \"quantity\": 49382173,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"tempor Excepteur quis\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"irure sit i\",\n          \"startTime\": \"2018-04-06T15:35:48.205Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"proident ullamco sunt incididunt adipisicing\"\n        }\n      ],\n      \"inboundMeals\": [\n        {\n          \"code\": \"aliquip\",\n          \"quantity\": 95770069,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"cupidatat ea sunt sed\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"do Ut veniam Lorem\",\n          \"startTime\": \"1985-11-30T21:37:04.411Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"Lorem Duis tempor aliquip id\"\n        },\n        {\n          \"code\": \"laboris ea nulla dolore\",\n          \"quantity\": 62879557,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"fugiat reprehenderit laborum\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"quis\",\n          \"startTime\": \"1965-12-11T04:27:36.771Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"qui Excepteur laborum reprehenderit\"\n        }\n      ],\n      \"outboundCabins\": [\n        {\n          \"code\": \"qui pariatur consequat\",\n          \"edit\": \"minim anim\",\n          \"id\": \"do et\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 83244039,\n          \"subCode\": \"cillum Excepteur Ut do\",\n          \"bookedItemReference\": \"veniam aliqua\",\n          \"isAttachment\": true\n        },\n        {\n          \"code\": \"anim\",\n          \"edit\": \"ullamco tempor\",\n          \"id\": \"aliquip aute labore\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 97140237,\n          \"subCode\": \"ut tempor\",\n          \"bookedItemReference\": \"mollit ex\",\n          \"isAttachment\": false\n        }\n      ],\n      \"inboundCabins\": [\n        {\n          \"code\": \"consectetur ad\",\n          \"edit\": \"consectetur elit ut\",\n          \"id\": \"irure culpa Lorem elit\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -38645629,\n          \"subCode\": \"in quis officia aliquip\",\n          \"bookedItemReference\": \"exercitation aliqua Duis adipisicing\",\n          \"isAttachment\": true\n        },\n        {\n          \"code\": \"nostrud mollit commodo dolore\",\n          \"edit\": \"in elit proident\",\n          \"id\": \"magna\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 24931842,\n          \"subCode\": \"proident\",\n          \"bookedItemReference\": \"dolor ut\",\n          \"isAttachment\": false\n        }\n      ],\n      \"outboundExtras\": [\n        {\n          \"code\": \"sed ipsum qui consectetur\",\n          \"quantity\": -98238952,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sed quis nulla\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"in esse incididunt aute\",\n          \"startTime\": \"1994-05-07T15:34:31.043Z\"\n        },\n        {\n          \"code\": \"commodo ad\",\n          \"quantity\": 36126656,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sit proident amet\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"ad magna ullamco\",\n          \"startTime\": \"2014-10-06T17:14:22.656Z\"\n        }\n      ],\n      \"inboundExtras\": [\n        {\n          \"code\": \"in proident non elit\",\n          \"quantity\": -38649068,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"laboris ipsum\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"irure dolor\",\n          \"startTime\": \"1999-07-17T19:35:29.327Z\"\n        },\n        {\n          \"code\": \"a\",\n          \"quantity\": 89338717,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"deserunt qui dolore eu mollit\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"in labore enim\",\n          \"startTime\": \"1991-04-03T12:02:13.002Z\"\n        }\n      ],\n      \"outboundDiscounts\": [\n        {\n          \"code\": \"qui eu enim sunt\",\n          \"quantity\": -87812162,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"in exercitat\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        },\n        {\n          \"code\": \"quis commodo\",\n          \"quantity\": 11890473,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Lorem sunt tempor\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false\n        }\n      ],\n      \"inboundDiscounts\": [\n        {\n          \"code\": \"laboris ad irure mollit\",\n          \"quantity\": 40695782,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"esse est culpa laboris aute\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        },\n        {\n          \"code\": \"laborum adipis\",\n          \"quantity\": 19764542,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"amet veniam\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        }\n      ]\n    }\n  },\n  \"timestamp\": -12644617,\n  \"packageCode\": \"sunt qui dolor\",\n  \"referralCode\": \"nostrud amet anim laborum qui\",\n  \"voucherCode\": \"sed ci\",\n  \"ticketBookCode\": \"deserunt dolore sint\",\n  \"ticketBookPassword\": \"commodo non labore ex\",\n  \"accommodations\": [\n    {\n      \"code\": \"aliquip ullamco\",\n      \"name\": \"Duis laborum enim deserunt officia\",\n      \"checkinDate\": \"1951-03-20T14:59:20.386Z\",\n      \"checkoutDate\": \"1948-06-05T14:42:38.181Z\",\n      \"rooms\": [\n        {\n          \"name\": \"velit eiusmod\",\n          \"code\": \"sun\",\n          \"quantity\": 31198873,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -85138217.10481544,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"ipsum occaecat\",\n          \"code\": \"eu pariatur sit\",\n          \"quantity\": 38710745,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 63764178.81414178,\n            \"available\": true\n          }\n        }\n      ]\n    },\n    {\n      \"code\": \"incididunt laboris cillum anim\",\n      \"name\": \"sed in aute ea in\",\n      \"checkinDate\": \"2011-12-05T04:52:13.290Z\",\n      \"checkoutDate\": \"1962-10-20T14:05:07.517Z\",\n      \"rooms\": [\n        {\n          \"name\": \"officia elit nostrud Ut\",\n          \"code\": \"irure mollit est dolor cupidatat\",\n          \"quantity\": -63695400,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -88350177.62124453,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"commodo eiusmod\",\n          \"code\": \"aliqua qui deserunt\",\n          \"quantity\": 48439424,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -24880853.349332005,\n            \"available\": true\n          }\n        }\n      ]\n    }\n  ],\n  \"showOnlyTotalPrice\": false,\n  \"paymentMethod\": \"CREDIT_CARD\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "491e2eac-42b5-49f7-a7b7-28881b0ea5b3",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "f2b1878e-d6fb-4f1c-b747-a163c4dca140",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3c69debb-0359-4002-839b-51cff5b3341c",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "2b1a5409-484c-45f0-a91b-d4d579b1730d",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /checkout-cart-authenticated/:id for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n\n      pm.test('Response has the `language` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"language\")){\n          if(responseData.language!=null){\n            pm.expect(typeof _.get(responseData, \"language\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"currency\")){\n          if(responseData.currency!=null){\n            pm.expect(typeof _.get(responseData, \"currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price\")){\n          if(responseData.price!=null){\n            pm.expect(typeof _.get(responseData, \"price\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.currency\")){\n          if(responseData.price.currency!=null){\n            pm.expect(typeof _.get(responseData, \"price.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"price.currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price.value` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.value\")){\n          if(responseData.price.value!=null){\n            pm.expect(typeof _.get(responseData, \"price.value\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.available` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.available\")){\n          if(responseData.price.available!=null){\n            pm.expect(typeof _.get(responseData, \"price.available\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `journeyType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"journeyType\")){\n          if(responseData.journeyType!=null){\n            pm.expect(typeof _.get(responseData, \"journeyType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"journeyType\", \"\")).to.be.oneOf(ONEWAY,RETURN,CRUISE,PACKAGE);\n      \n        pm.test('Response has the `passengers` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengers\")){\n            if(responseData.passengers!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengers\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengers` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengers\");  \n          let passengersArray = _.get(pm.response.json(), \"passengers\", \"\");  \n          for (let i = 0; i < passengersArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengers' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengers[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengers\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n        pm.test(`${i} element of array 'passengers' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().passengers[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `contactPerson` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson\")){\n          if(responseData.contactPerson!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo\")){\n          if(responseData.contactPerson.contactInfo!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.address` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.address\")){\n          if(responseData.contactPerson.contactInfo.address!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.address\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.city` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.city\")){\n          if(responseData.contactPerson.contactInfo.city!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.city\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.country` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.country\")){\n          if(responseData.contactPerson.contactInfo.country!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.country\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.contactInfo.country\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test('Response has the `contactPerson.contactInfo.email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.email\")){\n          if(responseData.contactPerson.contactInfo.email!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.mobile` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.mobile\")){\n          if(responseData.contactPerson.contactInfo.mobile!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.mobile\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.zip` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.zip\")){\n          if(responseData.contactPerson.contactInfo.zip!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.zip\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `contactPerson.birthYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthYear\")){\n            if(responseData.contactPerson.birthYear!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthMonth` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthMonth\")){\n            if(responseData.contactPerson.birthMonth!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthMonth\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthDay` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthDay\")){\n            if(responseData.contactPerson.birthDay!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthDay\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `contactPerson.firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.firstName\")){\n          if(responseData.contactPerson.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.lastName\")){\n          if(responseData.contactPerson.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.memberNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.memberNumber\")){\n          if(responseData.contactPerson.memberNumber!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.memberNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.redeemableClubPoints` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.redeemableClubPoints\")){\n          if(responseData.contactPerson.redeemableClubPoints!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.redeemableClubPoints\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.customerCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.customerCode\")){\n          if(responseData.contactPerson.customerCode!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.customerCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.gender\")){\n          if(responseData.contactPerson.gender!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.gender\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test('Response has the `contactPerson.nationality` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.nationality\")){\n          if(responseData.contactPerson.nationality!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.nationality\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.nationality\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n      \n        pm.test('Response has the `passengerDetails` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengerDetails\")){\n            if(responseData.passengerDetails!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengerDetails\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengerDetails` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengerDetails\");  \n          let passengerDetailsArray = _.get(pm.response.json(), \"passengerDetails\", \"\");  \n          for (let i = 0; i < passengerDetailsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengerDetails' has 'contactInfo' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"contactInfo\")){\n          if(pm.response.json().passengerDetails[i].contactInfo != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].contactInfo`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthYear' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthYear\")){\n            if(pm.response.json().passengerDetails[i].birthYear != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthYear`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthMonth' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthMonth\")){\n            if(pm.response.json().passengerDetails[i].birthMonth != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthMonth`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthDay' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthDay\")){\n            if(pm.response.json().passengerDetails[i].birthDay != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthDay`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'passengerDetails' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().passengerDetails[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().passengerDetails[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'memberNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"memberNumber\")){\n          if(pm.response.json().passengerDetails[i].memberNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].memberNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'redeemableClubPoints' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"redeemableClubPoints\")){\n          if(pm.response.json().passengerDetails[i].redeemableClubPoints != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].redeemableClubPoints`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'customerCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"customerCode\")){\n          if(pm.response.json().passengerDetails[i].customerCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].customerCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"gender\")){\n          if(pm.response.json().passengerDetails[i].gender != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].gender`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'nationality' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"nationality\")){\n          if(pm.response.json().passengerDetails[i].nationality != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].nationality`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'disabledPerson' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"disabledPerson\")){\n          if(pm.response.json().passengerDetails[i].disabledPerson != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].disabledPerson`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'id' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().passengerDetails[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].id`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengerDetails[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'uuid' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"uuid\")){\n          if(pm.response.json().passengerDetails[i].uuid != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].uuid`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().passengerDetails[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound\")){\n          if(responseData.outbound!=null){\n            pm.expect(typeof _.get(responseData, \"outbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.journeyCode\")){\n          if(responseData.outbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalPort\")){\n          if(responseData.outbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondArrivalPort\")){\n          if(responseData.outbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureCode\")){\n          if(responseData.outbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departurePort\")){\n          if(responseData.outbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondDeparturePort\")){\n          if(responseData.outbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureDate\")){\n          if(responseData.outbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.departureDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `outbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalDate\")){\n          if(responseData.outbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.arrivalDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `outbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket\")){\n          if(responseData.outbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.fareType\")){\n          if(responseData.outbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `outbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.ticketCode\")){\n          if(responseData.outbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `outbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.passengerPrices\")){\n            if(responseData.outbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"outbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.cabins\")){\n            if(responseData.outbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"outbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().outbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().outbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshore\")){\n            if(responseData.outbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"outbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasAshore\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshoreWithOptions\")){\n            if(responseData.outbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasOnboard\")){\n            if(responseData.outbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"outbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasOnboard\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.meals\")){\n            if(responseData.outbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"outbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.meals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'outbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().outbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().outbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.vehicles\")){\n            if(responseData.outbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"outbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().outbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().outbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().outbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.vesselCode\")){\n          if(responseData.outbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound\")){\n          if(responseData.inbound!=null){\n            pm.expect(typeof _.get(responseData, \"inbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.journeyCode\")){\n          if(responseData.inbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalPort\")){\n          if(responseData.inbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondArrivalPort\")){\n          if(responseData.inbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureCode\")){\n          if(responseData.inbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departurePort\")){\n          if(responseData.inbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondDeparturePort\")){\n          if(responseData.inbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureDate\")){\n          if(responseData.inbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.departureDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `inbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalDate\")){\n          if(responseData.inbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.arrivalDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `inbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket\")){\n          if(responseData.inbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.fareType\")){\n          if(responseData.inbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `inbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.ticketCode\")){\n          if(responseData.inbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `inbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.passengerPrices\")){\n            if(responseData.inbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"inbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.cabins\")){\n            if(responseData.inbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"inbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().inbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().inbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshore\")){\n            if(responseData.inbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"inbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasAshore\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshoreWithOptions\")){\n            if(responseData.inbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasOnboard\")){\n            if(responseData.inbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"inbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasOnboard\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.meals\")){\n            if(responseData.inbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"inbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.meals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'inbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().inbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().inbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.vehicles\")){\n            if(responseData.inbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"inbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().inbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().inbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().inbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `inbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.vesselCode\")){\n          if(responseData.inbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasVehicle` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasVehicle\")){\n          if(responseData.hasVehicle!=null){\n            pm.expect(typeof _.get(responseData, \"hasVehicle\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasPet` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasPet\")){\n          if(responseData.hasPet!=null){\n            pm.expect(typeof _.get(responseData, \"hasPet\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `agencyId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"agencyId\")){\n          if(responseData.agencyId!=null){\n            pm.expect(typeof _.get(responseData, \"agencyId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `userId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"userId\")){\n          if(responseData.userId!=null){\n            pm.expect(typeof _.get(responseData, \"userId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `connectionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"connectionId\")){\n          if(responseData.connectionId!=null){\n            pm.expect(typeof _.get(responseData, \"connectionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf(ACTIVE,BOOKED,DELETED,EXPIRED,BOOKING_IN_PROGRESS);\n\n      pm.test('Response has the `bookingResult` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult\")){\n          if(responseData.bookingResult!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.created` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.created\")){\n          if(responseData.bookingResult.created!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.created\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.created\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `bookingResult.bookingCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingCode\")){\n          if(responseData.bookingResult.bookingCode!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingState\")){\n          if(responseData.bookingResult.bookingState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingBalance` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingBalance\")){\n          if(responseData.bookingResult.bookingBalance!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingBalance\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingTotal` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingTotal\")){\n          if(responseData.bookingResult.bookingTotal!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingTotal\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paidState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paidState\")){\n          if(responseData.bookingResult.paidState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paidState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.currency\")){\n          if(responseData.bookingResult.currency!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentUrl\")){\n          if(responseData.bookingResult.paymentUrl!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentSessionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentSessionId\")){\n          if(responseData.bookingResult.paymentSessionId!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentSessionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookedItems` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems\")){\n          if(responseData.bookingResult.bookedItems!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookedItems\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `bookingResult.bookedItems.groupPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\")){\n            if(responseData.bookingResult.bookedItems.groupPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.groupPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\");  \n          let groupPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\", \"\");  \n          for (let i = 0; i < groupPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.outboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\");  \n          let outboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\");  \n          for (let i = 0; i < outboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.inboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\");  \n          let inboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\");  \n          for (let i = 0; i < inboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.outboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\");  \n          let outboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\", \"\");  \n          for (let i = 0; i < outboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.inboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\");  \n          let inboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\", \"\");  \n          for (let i = 0; i < inboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\")){\n            if(responseData.bookingResult.bookedItems.outboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\");  \n          let outboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\");  \n          for (let i = 0; i < outboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\")){\n            if(responseData.bookingResult.bookedItems.inboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\");  \n          let inboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\");  \n          for (let i = 0; i < inboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\")){\n            if(responseData.bookingResult.bookedItems.outboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\");  \n          let outboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\", \"\");  \n          for (let i = 0; i < outboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\")){\n            if(responseData.bookingResult.bookedItems.inboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\");  \n          let inboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\", \"\");  \n          for (let i = 0; i < inboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\")){\n            if(responseData.bookingResult.bookedItems.outboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\");  \n          let outboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\");  \n          for (let i = 0; i < outboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\")){\n            if(responseData.bookingResult.bookedItems.inboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\");  \n          let inboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\");  \n          for (let i = 0; i < inboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.outboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\");  \n          let outboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\", \"\");  \n          for (let i = 0; i < outboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.inboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\");  \n          let inboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\", \"\");  \n          for (let i = 0; i < inboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n        pm.test('Response has the `timestamp` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"timestamp\")){\n            if(responseData.timestamp!=null){\n              pm.expect(typeof _.get(responseData, \"timestamp\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `packageCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"packageCode\")){\n          if(responseData.packageCode!=null){\n            pm.expect(typeof _.get(responseData, \"packageCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `referralCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"referralCode\")){\n          if(responseData.referralCode!=null){\n            pm.expect(typeof _.get(responseData, \"referralCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `voucherCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"voucherCode\")){\n          if(responseData.voucherCode!=null){\n            pm.expect(typeof _.get(responseData, \"voucherCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookCode\")){\n          if(responseData.ticketBookCode!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookPassword` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookPassword\")){\n          if(responseData.ticketBookPassword!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookPassword\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `accommodations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"accommodations\")){\n            if(responseData.accommodations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"accommodations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `accommodations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"accommodations\");  \n          let accommodationsArray = _.get(pm.response.json(), \"accommodations\", \"\");  \n          for (let i = 0; i < accommodationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'accommodations' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().accommodations[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().accommodations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkinDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkinDate\")){\n          if(pm.response.json().accommodations[i].checkinDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkinDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"accommodations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'accommodations' has 'checkoutDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkoutDate\")){\n          if(pm.response.json().accommodations[i].checkoutDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkoutDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"accommodations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n        pm.test(`${i} element of array 'accommodations' has 'rooms' as an array`,function(){ \n          if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"rooms\")){\n            if(pm.response.json().accommodations[i].rooms != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `accommodations[${i}].rooms`))).to.equal(true);\n            }\n          }\n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `showOnlyTotalPrice` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"showOnlyTotalPrice\")){\n          if(responseData.showOnlyTotalPrice!=null){\n            pm.expect(typeof _.get(responseData, \"showOnlyTotalPrice\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `paymentMethod` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"paymentMethod\")){\n          if(responseData.paymentMethod!=null){\n            pm.expect(typeof _.get(responseData, \"paymentMethod\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"paymentMethod\", \"\")).to.be.oneOf(CREDIT_CARD,VOUCHER,CLUB_POINTS,TICKET_BOOK);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b6a7e62f-82b6-41d2-97d4-f5d121c56e27",
      "name": "/checkout-cart-anonymous/:id",
      "request": {
        "name": "/checkout-cart-anonymous/:id",
        "description": {},
        "url": {
          "path": [
            "checkout-cart-anonymous",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "b4fd748d-cdab-423f-9be6-7edb47c357c3",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"urn:uuid:808dda90-3a32-529a-a9ee-778872392bee\",\n  \"language\": \"mollit Excepteur proident Ut\",\n  \"currency\": \"DKK\",\n  \"price\": {\n    \"currency\": \"DKK\",\n    \"value\": -87336965.72249374,\n    \"available\": false\n  },\n  \"journeyType\": \"PACKAGE\",\n  \"passengers\": [\n    {\n      \"code\": \"ADULT\",\n      \"quantity\": 19260119\n    },\n    {\n      \"code\": \"BABY\",\n      \"quantity\": 21692355\n    }\n  ],\n  \"contactPerson\": {\n    \"contactInfo\": {\n      \"address\": \"labore in consequat qui\",\n      \"city\": \"ut\",\n      \"country\": \"TN\",\n      \"email\": \"mollit pariatur\",\n      \"mobile\": \"veniam anim ut laboris\",\n      \"zip\": \"sit esse\"\n    },\n    \"birthYear\": -56022245,\n    \"birthMonth\": 36605965,\n    \"birthDay\": -14220076,\n    \"firstName\": \"dolo\",\n    \"lastName\": \"et sed deserunt dolore nostrud\",\n    \"memberNumber\": \"sunt dolore\",\n    \"redeemableClubPoints\": -15705346.280198067,\n    \"customerCode\": \"cillum volup\",\n    \"gender\": \"UNKNOWN\",\n    \"nationality\": \"GH\"\n  },\n  \"passengerDetails\": [\n    {\n      \"contactInfo\": {\n        \"address\": \"aliquip in eu\",\n        \"city\": \"cupidatat exercitation est non esse\",\n        \"country\": \"HU\",\n        \"email\": \"Lorem qui exercitation\",\n        \"mobile\": \"ut\",\n        \"zip\": \"non ul\"\n      },\n      \"birthYear\": -3207884,\n      \"birthMonth\": 35160966,\n      \"birthDay\": -11778426,\n      \"firstName\": \"magna ea\",\n      \"lastName\": \"elit do aliquip amet\",\n      \"memberNumber\": \"laborum mollit cupidatat\",\n      \"redeemableClubPoints\": -5690907.667265102,\n      \"customerCode\": \"officia aliquip ut fugiat\",\n      \"gender\": \"UNKNOWN\",\n      \"nationality\": \"AT\",\n      \"disabledPerson\": false,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"elit consequat magna exercitation Duis\"\n      },\n      \"code\": \"CHILD\",\n      \"uuid\": \"ex eiusmod\",\n      \"bookedItemReference\": \"occaecat aliquip commodo incididunt aliqua\"\n    },\n    {\n      \"contactInfo\": {\n        \"address\": \"mollit aute incididunt cillum\",\n        \"city\": \"sed sint ad tempor\",\n        \"country\": \"AM\",\n        \"email\": \"adipisicing esse velit\",\n        \"mobile\": \"esse mollit labore sed\",\n        \"zip\": \"fugiat do officia dolore elit\"\n      },\n      \"birthYear\": 98294912,\n      \"birthMonth\": 28004253,\n      \"birthDay\": 7898555,\n      \"firstName\": \"nostrud eiusmod\",\n      \"lastName\": \"Excepteur id adipisicing ad mollit\",\n      \"memberNumber\": \"mollit exercitation deserunt id\",\n      \"redeemableClubPoints\": -16016028.931976795,\n      \"customerCode\": \"ullamco mollit et nulla\",\n      \"gender\": \"UNKNOWN\",\n      \"nationality\": \"JM\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"proident veniam dolore\"\n      },\n      \"code\": \"ADULT\",\n      \"uuid\": \"in est nisi sunt irure\",\n      \"bookedItemReference\": \"enim tempor\"\n    }\n  ],\n  \"outbound\": {\n    \"journeyCode\": \"ea nostrud ullamco in labore\",\n    \"arrivalPort\": \"SESMD\",\n    \"secondArrivalPort\": \"NOLAD\",\n    \"departureCode\": \"voluptate consectetur\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"NOBGO\",\n    \"departureDate\": \"2009-10-04T21:11:49.812Z\",\n    \"arrivalDate\": \"2009-10-28T03:18:22.741Z\",\n    \"ticket\": {\n      \"fareType\": \"FLEX\",\n      \"ticketCode\": \"do ut\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"BABY\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 94244445.84754145,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"ADULT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -51036609.818027005,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"fugiat Lorem\",\n        \"edit\": \"reprehend\",\n        \"id\": \"tempor enim ipsum nostrud\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 89776727.50215712,\n          \"available\": true\n        },\n        \"quantityInCabin\": -78681896,\n        \"subCode\": \"labore\",\n        \"bookedItemReference\": \"occaecat deserunt\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"amet non sed pariatur\",\n        \"edit\": \"adipisicing aute Duis ex laboris\",\n        \"id\": \"tempor quis anim\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 42404212.63044909,\n          \"available\": false\n        },\n        \"quantityInCabin\": -79535299,\n        \"subCode\": \"e\",\n        \"bookedItemReference\": \"velit eu deserunt sed incididunt\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"sed voluptate Excepteur\",\n        \"quantity\": -58048128,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 85574791.74113792,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"sunt do\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"proident Lorem\",\n        \"startTime\": \"1976-04-01T06:03:40.817Z\"\n      },\n      {\n        \"code\": \"aute dolor elit cillum\",\n        \"quantity\": 99565146,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 50605515.75024998,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"laboris aliquip amet \",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"adipisicing esse aute cillum in\",\n        \"startTime\": \"1956-06-12T07:47:24.014Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"ea consequat et magna\",\n        \"quantity\": -26912994,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 55794452.97644034,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nisi velit Lorem enim culpa\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"l\",\n        \"startTime\": \"1957-06-06T21:05:47.070Z\"\n      },\n      {\n        \"code\": \"Duis consequat ea cupidatat\",\n        \"quantity\": -77648252,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -41311889.46920586,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"fugiat sint labore minim\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Excepteur proident ut dolor\",\n        \"startTime\": \"2011-05-10T01:33:16.183Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"ut pariatur nostrud proident esse\",\n        \"quantity\": -84022664,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 34876483.471639246,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolor dolore consequat et\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"commodo dolor veniam\",\n        \"startTime\": \"1960-02-22T22:43:13.814Z\"\n      },\n      {\n        \"code\": \"labore\",\n        \"quantity\": 6438809,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 75843307.36681834,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"officia labore\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"dolore nulla\",\n        \"startTime\": \"1990-12-03T15:45:03.122Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"magna occaecat ut proident\",\n        \"quantity\": -14485570,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 36538485.46514058,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolore ad veniam enim\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"minim non\",\n        \"startTime\": \"1971-07-03T00:22:03.863Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"reprehenderit in\"\n      },\n      {\n        \"code\": \"ut eu dolore amet\",\n        \"quantity\": -44185594,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 8085932.729816437,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"amet et fugiat qui dolore\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"ipsum amet elit cu\",\n        \"startTime\": \"2023-04-09T18:28:48.250Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"pariatur \"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"incididunt\",\n        \"quantity\": 99900946,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -57775596.03812006,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"est pariatur eiusmod laboris\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"minim\",\n        \"length\": -8789132.078440517,\n        \"hasTrailer\": true,\n        \"id\": \"labore\"\n      },\n      {\n        \"code\": \"nostrud\",\n        \"quantity\": -22103989,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 71307619.64154118,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolor ipsum aliqua\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"proident nulla\",\n        \"length\": 97563448.47984853,\n        \"hasTrailer\": true,\n        \"id\": \"laboris enim non aliquip\"\n      }\n    ],\n    \"vesselCode\": \"eu\"\n  },\n  \"inbound\": {\n    \"journeyCode\": \"minim do sed commod\",\n    \"arrivalPort\": \"NOTRF\",\n    \"secondArrivalPort\": \"NOSVG\",\n    \"departureCode\": \"nostrud Excepteur\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"DKHIR\",\n    \"departureDate\": \"1977-12-14T03:53:24.289Z\",\n    \"arrivalDate\": \"2022-10-03T13:36:55.693Z\",\n    \"ticket\": {\n      \"fareType\": \"FJORDCLUB\",\n      \"ticketCode\": \"deserunt tempor\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 2407549.6543863267,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"ADULT\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -1783124.1021587253,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"id aliquip do dolor\",\n        \"edit\": \"Duis eiusmod incididunt\",\n        \"id\": \"qui\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 40330577.84562594,\n          \"available\": false\n        },\n        \"quantityInCabin\": 50907516,\n        \"subCode\": \"fugiat adipisicing dolor\",\n        \"bookedItemReference\": \"sunt laboris\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"ad esse\",\n        \"edit\": \"aliqua sit\",\n        \"id\": \"dolore\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -61542658.360934466,\n          \"available\": true\n        },\n        \"quantityInCabin\": -60162891,\n        \"subCode\": \"dolore\",\n        \"bookedItemReference\": \"labore voluptate\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"commodo consectetur pariatur\",\n        \"quantity\": 20423192,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 31363803.21920508,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"dolore culpa Excepteur\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"do\",\n        \"startTime\": \"2008-09-14T23:25:15.293Z\"\n      },\n      {\n        \"code\": \"ea Ut do nulla\",\n        \"quantity\": 60241519,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -39641740.28380003,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ad consequat aute\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"minim pariatur adipisicing consequat\",\n        \"startTime\": \"1953-07-01T13:15:20.300Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"amet commodo\",\n        \"quantity\": 59252965,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -59336459.97967076,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"Duis id adipisicing in\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"minim nisi nostrud dolore\",\n        \"startTime\": \"2007-09-08T18:12:10.127Z\"\n      },\n      {\n        \"code\": \"laboris labore incididunt voluptate\",\n        \"quantity\": -56581584,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -99827269.89100742,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"cillum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"sint nisi\",\n        \"startTime\": \"2017-08-15T01:30:09.314Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"amet\",\n        \"quantity\": -26784987,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 66801249.91029763,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"commodo mollit\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"anim\",\n        \"startTime\": \"1981-10-22T10:30:10.046Z\"\n      },\n      {\n        \"code\": \"ipsum mollit sed\",\n        \"quantity\": 34035320,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 5256652.133483142,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"incididunt elit ad minim adipisicing\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"laboris ut\",\n        \"startTime\": \"2016-11-07T01:02:58.067Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"esse aliqua\",\n        \"quantity\": -90444968,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 72121369.25041914,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"nostrud magna officia velit\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"qui\",\n        \"startTime\": \"1956-07-29T10:02:41.183Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"nulla est quis proident in\"\n      },\n      {\n        \"code\": \"reprehenderi\",\n        \"quantity\": -55935507,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -1463000.032648012,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"veniam tempor ut\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"cupidat\",\n        \"startTime\": \"2022-10-27T03:05:39.912Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"eu ad\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"do Duis pariatur\",\n        \"quantity\": 35521189,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 50483534.14423406,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"do\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"eiusmod commodo dolor occaecat ullamco\",\n        \"length\": -50688421.103195444,\n        \"hasTrailer\": true,\n        \"id\": \"laborum esse dolore proident\"\n      },\n      {\n        \"code\": \"consequat ullamco\",\n        \"quantity\": -26661972,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -5684809.919626638,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"enim magna dolore deserunt\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"sed enim\",\n        \"length\": 99129325.56693804,\n        \"hasTrailer\": true,\n        \"id\": \"in magna sunt laboris qui\"\n      }\n    ],\n    \"vesselCode\": \"Ut proident pariatur ut sunt\"\n  },\n  \"hasVehicle\": true,\n  \"hasPet\": true,\n  \"agencyId\": \"labore sed dolor\",\n  \"userId\": \"est culpa Lorem voluptate s\",\n  \"connectionId\": \"exercitation Duis\",\n  \"status\": \"DELETED\",\n  \"bookingResult\": {\n    \"created\": \"2016-02-24T22:34:09.325Z\",\n    \"bookingCode\": \"id magna\",\n    \"bookingState\": \"ad culpa\",\n    \"bookingBalance\": \"ut culpa ullamco Ut reprehenderit\",\n    \"bookingTotal\": \"dolore dolor\",\n    \"paidState\": \"et amet consequat anim labore\",\n    \"currency\": \"conse\",\n    \"paymentUrl\": \"cupidatat in nostrud fugiat enim\",\n    \"paymentSessionId\": \"nisi id sunt Ut\",\n    \"bookedItems\": {\n      \"groupPrices\": [\n        {\n          \"name\": \"ea irure aute\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"name\": \"voluptate labore\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundPassengerPrices\": [\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"BABY\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"inboundPassengerPrices\": [\n        {\n          \"code\": \"BABY\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"ADULT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundVehicles\": [\n        {\n          \"code\": \"eiusmod pariatur laboris sunt\",\n          \"quantity\": 29117862,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"qui et elit laboris\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"elit sunt in\",\n          \"length\": 84079792.35291564,\n          \"hasTrailer\": false,\n          \"id\": \"amet ex\"\n        },\n        {\n          \"code\": \"sit officia\",\n          \"quantity\": 5394261,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Ut mollit quis mag\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"qui\",\n          \"length\": 8797154.481068864,\n          \"hasTrailer\": true,\n          \"id\": \"veniam do\"\n        }\n      ],\n      \"inboundVehicles\": [\n        {\n          \"code\": \"velit quis\",\n          \"quantity\": 3564079,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"laboris dolor voluptate dolore\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"et eu amet ea\",\n          \"length\": -72307328.16589254,\n          \"hasTrailer\": true,\n          \"id\": \"est officia Excepteur et minim\"\n        },\n        {\n          \"code\": \"qui anim elit dolore incididunt\",\n          \"quantity\": -37015207,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"officia voluptate irure\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"deserunt Excepteur\",\n          \"length\": -22859770.727964252,\n          \"hasTrailer\": false,\n          \"id\": \"id nulla ea in\"\n        }\n      ],\n      \"outboundMeals\": [\n        {\n          \"code\": \"nostrud ea laboris ex nisi\",\n          \"quantity\": -48559035,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sunt officia sit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"cillum proident\",\n          \"startTime\": \"1956-06-15T20:07:25.476Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"cupidatat\"\n        },\n        {\n          \"code\": \"deserunt\",\n          \"quantity\": -34516915,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ad\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"tempor Excepteu\",\n          \"startTime\": \"1971-06-24T05:08:58.715Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"nisi\"\n        }\n      ],\n      \"inboundMeals\": [\n        {\n          \"code\": \"cupidatat Duis eiusmod laborum\",\n          \"quantity\": -89759174,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"voluptate\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"adipisicing qui Duis Excepteur occaecat\",\n          \"startTime\": \"1974-09-10T02:18:03.225Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"do cupidatat consectetur Duis\"\n        },\n        {\n          \"code\": \"reprehenderit dolore cupidatat\",\n          \"quantity\": 71811109,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ipsum dol\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"veniam magna elit dolore\",\n          \"startTime\": \"1958-02-03T10:13:01.978Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"ut Excepteur\"\n        }\n      ],\n      \"outboundCabins\": [\n        {\n          \"code\": \"sed dolor ut\",\n          \"edit\": \"veniam \",\n          \"id\": \"reprehenderit aute nulla\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -315324,\n          \"subCode\": \"commodo ut\",\n          \"bookedItemReference\": \"eu consequat laborum nulla\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"dolor\",\n          \"edit\": \"i\",\n          \"id\": \"i\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 83701879,\n          \"subCode\": \"do anim\",\n          \"bookedItemReference\": \"amet\",\n          \"isAttachment\": true\n        }\n      ],\n      \"inboundCabins\": [\n        {\n          \"code\": \"irure proident laboris reprehenderit\",\n          \"edit\": \"aliquip fugiat aliqua\",\n          \"id\": \"eu\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 88836997,\n          \"subCode\": \"non Lorem ullamco\",\n          \"bookedItemReference\": \"ut nulla Lorem ad\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"adipisicing nostrud\",\n          \"edit\": \"fugiat ut pariatur\",\n          \"id\": \"irure cillum ex\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -58350540,\n          \"subCode\": \"in\",\n          \"bookedItemReference\": \"occaecat commodo et consectetur laborum\",\n          \"isAttachment\": true\n        }\n      ],\n      \"outboundExtras\": [\n        {\n          \"code\": \"d\",\n          \"quantity\": -75093385,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"amet ullamco eu ad\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"Duis elit velit\",\n          \"startTime\": \"1992-08-10T23:56:58.236Z\"\n        },\n        {\n          \"code\": \"ea\",\n          \"quantity\": 32006496,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"dolor laborum sunt\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"non\",\n          \"startTime\": \"2016-02-21T14:06:30.439Z\"\n        }\n      ],\n      \"inboundExtras\": [\n        {\n          \"code\": \"minim Duis reprehenderit eiusmod sunt\",\n          \"quantity\": 80988587,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ullamco \",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"qui\",\n          \"startTime\": \"1959-01-02T15:14:26.233Z\"\n        },\n        {\n          \"code\": \"sit reprehenderit non\",\n          \"quantity\": -80683654,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Ut aliqua officia velit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"dolore ex commo\",\n          \"startTime\": \"2021-05-13T01:50:56.223Z\"\n        }\n      ],\n      \"outboundDiscounts\": [\n        {\n          \"code\": \"ea magna consequat\",\n          \"quantity\": 2607323,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"deserunt exercitation non nisi\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"voluptate veniam exercitation\",\n          \"quantity\": 95305827,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla tempor\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        }\n      ],\n      \"inboundDiscounts\": [\n        {\n          \"code\": \"deserunt commodo\",\n          \"quantity\": -89315342,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sunt \",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"dolor\",\n          \"quantity\": 37449785,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Duis sunt\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true\n        }\n      ]\n    }\n  },\n  \"timestamp\": 55944224,\n  \"packageCode\": \"aliquip ea irure\",\n  \"referralCode\": \"sit tempor\",\n  \"voucherCode\": \"mollit\",\n  \"ticketBookCode\": \"voluptate do\",\n  \"ticketBookPassword\": \"deserunt occae\",\n  \"accommodations\": [\n    {\n      \"code\": \"non ea incididunt \",\n      \"name\": \"minim sed enim aliquip\",\n      \"checkinDate\": \"1998-10-12T14:31:41.005Z\",\n      \"checkoutDate\": \"1975-07-15T22:19:43.653Z\",\n      \"rooms\": [\n        {\n          \"name\": \"exercitation e\",\n          \"code\": \"magna sunt\",\n          \"quantity\": 82105969,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -99739269.11586961,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"nisi velit\",\n          \"code\": \"sint elit reprehenderit\",\n          \"quantity\": -62514143,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -76980930.9644017,\n            \"available\": false\n          }\n        }\n      ]\n    },\n    {\n      \"code\": \"nostrud sint ad aute\",\n      \"name\": \"non anim voluptate qui\",\n      \"checkinDate\": \"1954-06-12T16:06:41.363Z\",\n      \"checkoutDate\": \"2022-11-17T18:33:23.525Z\",\n      \"rooms\": [\n        {\n          \"name\": \"culpa aute\",\n          \"code\": \"nulla\",\n          \"quantity\": -92651760,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 7622487.9307076335,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"fugiat consequat magna\",\n          \"code\": \"consequat elit do Lorem cu\",\n          \"quantity\": 79046587,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -22116844.220564052,\n            \"available\": true\n          }\n        }\n      ]\n    }\n  ],\n  \"showOnlyTotalPrice\": true,\n  \"paymentMethod\": \"TICKET_BOOK\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "585d10b7-cdbf-4b32-a789-204d85198bab",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "2344e0b6-19a3-4bf4-8e1d-36f3b614dd08",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "4d136380-8cf4-4cd0-a629-49f0a0da0232",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /checkout-cart-anonymous/:id for http method type post in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n\n      pm.test('Response has the `language` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"language\")){\n          if(responseData.language!=null){\n            pm.expect(typeof _.get(responseData, \"language\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"currency\")){\n          if(responseData.currency!=null){\n            pm.expect(typeof _.get(responseData, \"currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price\")){\n          if(responseData.price!=null){\n            pm.expect(typeof _.get(responseData, \"price\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.currency\")){\n          if(responseData.price.currency!=null){\n            pm.expect(typeof _.get(responseData, \"price.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"price.currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price.value` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.value\")){\n          if(responseData.price.value!=null){\n            pm.expect(typeof _.get(responseData, \"price.value\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.available` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.available\")){\n          if(responseData.price.available!=null){\n            pm.expect(typeof _.get(responseData, \"price.available\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `journeyType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"journeyType\")){\n          if(responseData.journeyType!=null){\n            pm.expect(typeof _.get(responseData, \"journeyType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"journeyType\", \"\")).to.be.oneOf(ONEWAY,RETURN,CRUISE,PACKAGE);\n      \n        pm.test('Response has the `passengers` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengers\")){\n            if(responseData.passengers!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengers\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengers` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengers\");  \n          let passengersArray = _.get(pm.response.json(), \"passengers\", \"\");  \n          for (let i = 0; i < passengersArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengers' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengers[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengers\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n        pm.test(`${i} element of array 'passengers' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().passengers[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `contactPerson` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson\")){\n          if(responseData.contactPerson!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo\")){\n          if(responseData.contactPerson.contactInfo!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.address` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.address\")){\n          if(responseData.contactPerson.contactInfo.address!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.address\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.city` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.city\")){\n          if(responseData.contactPerson.contactInfo.city!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.city\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.country` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.country\")){\n          if(responseData.contactPerson.contactInfo.country!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.country\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.contactInfo.country\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test('Response has the `contactPerson.contactInfo.email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.email\")){\n          if(responseData.contactPerson.contactInfo.email!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.mobile` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.mobile\")){\n          if(responseData.contactPerson.contactInfo.mobile!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.mobile\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.zip` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.zip\")){\n          if(responseData.contactPerson.contactInfo.zip!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.zip\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `contactPerson.birthYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthYear\")){\n            if(responseData.contactPerson.birthYear!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthMonth` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthMonth\")){\n            if(responseData.contactPerson.birthMonth!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthMonth\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthDay` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthDay\")){\n            if(responseData.contactPerson.birthDay!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthDay\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `contactPerson.firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.firstName\")){\n          if(responseData.contactPerson.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.lastName\")){\n          if(responseData.contactPerson.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.memberNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.memberNumber\")){\n          if(responseData.contactPerson.memberNumber!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.memberNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.redeemableClubPoints` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.redeemableClubPoints\")){\n          if(responseData.contactPerson.redeemableClubPoints!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.redeemableClubPoints\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.customerCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.customerCode\")){\n          if(responseData.contactPerson.customerCode!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.customerCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.gender\")){\n          if(responseData.contactPerson.gender!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.gender\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test('Response has the `contactPerson.nationality` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.nationality\")){\n          if(responseData.contactPerson.nationality!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.nationality\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.nationality\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n      \n        pm.test('Response has the `passengerDetails` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengerDetails\")){\n            if(responseData.passengerDetails!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengerDetails\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengerDetails` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengerDetails\");  \n          let passengerDetailsArray = _.get(pm.response.json(), \"passengerDetails\", \"\");  \n          for (let i = 0; i < passengerDetailsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengerDetails' has 'contactInfo' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"contactInfo\")){\n          if(pm.response.json().passengerDetails[i].contactInfo != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].contactInfo`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthYear' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthYear\")){\n            if(pm.response.json().passengerDetails[i].birthYear != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthYear`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthMonth' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthMonth\")){\n            if(pm.response.json().passengerDetails[i].birthMonth != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthMonth`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthDay' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthDay\")){\n            if(pm.response.json().passengerDetails[i].birthDay != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthDay`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'passengerDetails' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().passengerDetails[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().passengerDetails[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'memberNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"memberNumber\")){\n          if(pm.response.json().passengerDetails[i].memberNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].memberNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'redeemableClubPoints' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"redeemableClubPoints\")){\n          if(pm.response.json().passengerDetails[i].redeemableClubPoints != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].redeemableClubPoints`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'customerCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"customerCode\")){\n          if(pm.response.json().passengerDetails[i].customerCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].customerCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"gender\")){\n          if(pm.response.json().passengerDetails[i].gender != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].gender`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'nationality' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"nationality\")){\n          if(pm.response.json().passengerDetails[i].nationality != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].nationality`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'disabledPerson' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"disabledPerson\")){\n          if(pm.response.json().passengerDetails[i].disabledPerson != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].disabledPerson`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'id' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().passengerDetails[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].id`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengerDetails[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'uuid' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"uuid\")){\n          if(pm.response.json().passengerDetails[i].uuid != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].uuid`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().passengerDetails[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound\")){\n          if(responseData.outbound!=null){\n            pm.expect(typeof _.get(responseData, \"outbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.journeyCode\")){\n          if(responseData.outbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalPort\")){\n          if(responseData.outbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondArrivalPort\")){\n          if(responseData.outbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureCode\")){\n          if(responseData.outbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departurePort\")){\n          if(responseData.outbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondDeparturePort\")){\n          if(responseData.outbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureDate\")){\n          if(responseData.outbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.departureDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `outbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalDate\")){\n          if(responseData.outbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.arrivalDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `outbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket\")){\n          if(responseData.outbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.fareType\")){\n          if(responseData.outbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `outbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.ticketCode\")){\n          if(responseData.outbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `outbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.passengerPrices\")){\n            if(responseData.outbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"outbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.cabins\")){\n            if(responseData.outbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"outbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().outbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().outbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshore\")){\n            if(responseData.outbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"outbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasAshore\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshoreWithOptions\")){\n            if(responseData.outbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasOnboard\")){\n            if(responseData.outbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"outbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasOnboard\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.meals\")){\n            if(responseData.outbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"outbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.meals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'outbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().outbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().outbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.vehicles\")){\n            if(responseData.outbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"outbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().outbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().outbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().outbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.vesselCode\")){\n          if(responseData.outbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound\")){\n          if(responseData.inbound!=null){\n            pm.expect(typeof _.get(responseData, \"inbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.journeyCode\")){\n          if(responseData.inbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalPort\")){\n          if(responseData.inbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondArrivalPort\")){\n          if(responseData.inbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureCode\")){\n          if(responseData.inbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departurePort\")){\n          if(responseData.inbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondDeparturePort\")){\n          if(responseData.inbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureDate\")){\n          if(responseData.inbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.departureDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `inbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalDate\")){\n          if(responseData.inbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.arrivalDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `inbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket\")){\n          if(responseData.inbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.fareType\")){\n          if(responseData.inbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `inbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.ticketCode\")){\n          if(responseData.inbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `inbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.passengerPrices\")){\n            if(responseData.inbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"inbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.cabins\")){\n            if(responseData.inbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"inbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().inbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().inbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshore\")){\n            if(responseData.inbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"inbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasAshore\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshoreWithOptions\")){\n            if(responseData.inbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasOnboard\")){\n            if(responseData.inbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"inbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasOnboard\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.meals\")){\n            if(responseData.inbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"inbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.meals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'inbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().inbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().inbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.vehicles\")){\n            if(responseData.inbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"inbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().inbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().inbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().inbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `inbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.vesselCode\")){\n          if(responseData.inbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasVehicle` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasVehicle\")){\n          if(responseData.hasVehicle!=null){\n            pm.expect(typeof _.get(responseData, \"hasVehicle\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasPet` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasPet\")){\n          if(responseData.hasPet!=null){\n            pm.expect(typeof _.get(responseData, \"hasPet\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `agencyId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"agencyId\")){\n          if(responseData.agencyId!=null){\n            pm.expect(typeof _.get(responseData, \"agencyId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `userId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"userId\")){\n          if(responseData.userId!=null){\n            pm.expect(typeof _.get(responseData, \"userId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `connectionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"connectionId\")){\n          if(responseData.connectionId!=null){\n            pm.expect(typeof _.get(responseData, \"connectionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf(ACTIVE,BOOKED,DELETED,EXPIRED,BOOKING_IN_PROGRESS);\n\n      pm.test('Response has the `bookingResult` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult\")){\n          if(responseData.bookingResult!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.created` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.created\")){\n          if(responseData.bookingResult.created!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.created\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.created\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `bookingResult.bookingCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingCode\")){\n          if(responseData.bookingResult.bookingCode!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingState\")){\n          if(responseData.bookingResult.bookingState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingBalance` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingBalance\")){\n          if(responseData.bookingResult.bookingBalance!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingBalance\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingTotal` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingTotal\")){\n          if(responseData.bookingResult.bookingTotal!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingTotal\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paidState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paidState\")){\n          if(responseData.bookingResult.paidState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paidState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.currency\")){\n          if(responseData.bookingResult.currency!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentUrl\")){\n          if(responseData.bookingResult.paymentUrl!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentSessionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentSessionId\")){\n          if(responseData.bookingResult.paymentSessionId!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentSessionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookedItems` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems\")){\n          if(responseData.bookingResult.bookedItems!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookedItems\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `bookingResult.bookedItems.groupPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\")){\n            if(responseData.bookingResult.bookedItems.groupPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.groupPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\");  \n          let groupPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\", \"\");  \n          for (let i = 0; i < groupPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.outboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\");  \n          let outboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\");  \n          for (let i = 0; i < outboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.inboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\");  \n          let inboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\");  \n          for (let i = 0; i < inboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.outboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\");  \n          let outboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\", \"\");  \n          for (let i = 0; i < outboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.inboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\");  \n          let inboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\", \"\");  \n          for (let i = 0; i < inboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\")){\n            if(responseData.bookingResult.bookedItems.outboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\");  \n          let outboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\");  \n          for (let i = 0; i < outboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\")){\n            if(responseData.bookingResult.bookedItems.inboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\");  \n          let inboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\");  \n          for (let i = 0; i < inboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\")){\n            if(responseData.bookingResult.bookedItems.outboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\");  \n          let outboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\", \"\");  \n          for (let i = 0; i < outboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\")){\n            if(responseData.bookingResult.bookedItems.inboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\");  \n          let inboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\", \"\");  \n          for (let i = 0; i < inboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\")){\n            if(responseData.bookingResult.bookedItems.outboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\");  \n          let outboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\");  \n          for (let i = 0; i < outboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\")){\n            if(responseData.bookingResult.bookedItems.inboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\");  \n          let inboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\");  \n          for (let i = 0; i < inboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.outboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\");  \n          let outboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\", \"\");  \n          for (let i = 0; i < outboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.inboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\");  \n          let inboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\", \"\");  \n          for (let i = 0; i < inboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n        pm.test('Response has the `timestamp` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"timestamp\")){\n            if(responseData.timestamp!=null){\n              pm.expect(typeof _.get(responseData, \"timestamp\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `packageCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"packageCode\")){\n          if(responseData.packageCode!=null){\n            pm.expect(typeof _.get(responseData, \"packageCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `referralCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"referralCode\")){\n          if(responseData.referralCode!=null){\n            pm.expect(typeof _.get(responseData, \"referralCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `voucherCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"voucherCode\")){\n          if(responseData.voucherCode!=null){\n            pm.expect(typeof _.get(responseData, \"voucherCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookCode\")){\n          if(responseData.ticketBookCode!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookPassword` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookPassword\")){\n          if(responseData.ticketBookPassword!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookPassword\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `accommodations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"accommodations\")){\n            if(responseData.accommodations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"accommodations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `accommodations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"accommodations\");  \n          let accommodationsArray = _.get(pm.response.json(), \"accommodations\", \"\");  \n          for (let i = 0; i < accommodationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'accommodations' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().accommodations[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().accommodations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkinDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkinDate\")){\n          if(pm.response.json().accommodations[i].checkinDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkinDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"accommodations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'accommodations' has 'checkoutDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkoutDate\")){\n          if(pm.response.json().accommodations[i].checkoutDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkoutDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"accommodations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n        pm.test(`${i} element of array 'accommodations' has 'rooms' as an array`,function(){ \n          if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"rooms\")){\n            if(pm.response.json().accommodations[i].rooms != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `accommodations[${i}].rooms`))).to.equal(true);\n            }\n          }\n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `showOnlyTotalPrice` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"showOnlyTotalPrice\")){\n          if(responseData.showOnlyTotalPrice!=null){\n            pm.expect(typeof _.get(responseData, \"showOnlyTotalPrice\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `paymentMethod` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"paymentMethod\")){\n          if(responseData.paymentMethod!=null){\n            pm.expect(typeof _.get(responseData, \"paymentMethod\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"paymentMethod\", \"\")).to.be.oneOf(CREDIT_CARD,VOUCHER,CLUB_POINTS,TICKET_BOOK);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "6b6057df-fb5a-4170-8ded-a9344e576aa6",
      "name": "/delete-cart/:id",
      "request": {
        "name": "/delete-cart/:id",
        "description": {},
        "url": {
          "path": [
            "delete-cart",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null
      },
      "response": [
        {
          "id": "cce55871-b034-48a9-b30c-15ed92f97110",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"urn:uuid:808dda90-3a32-529a-a9ee-778872392bee\",\n  \"language\": \"mollit Excepteur proident Ut\",\n  \"currency\": \"DKK\",\n  \"price\": {\n    \"currency\": \"DKK\",\n    \"value\": -87336965.72249374,\n    \"available\": false\n  },\n  \"journeyType\": \"PACKAGE\",\n  \"passengers\": [\n    {\n      \"code\": \"ADULT\",\n      \"quantity\": 19260119\n    },\n    {\n      \"code\": \"BABY\",\n      \"quantity\": 21692355\n    }\n  ],\n  \"contactPerson\": {\n    \"contactInfo\": {\n      \"address\": \"labore in consequat qui\",\n      \"city\": \"ut\",\n      \"country\": \"TN\",\n      \"email\": \"mollit pariatur\",\n      \"mobile\": \"veniam anim ut laboris\",\n      \"zip\": \"sit esse\"\n    },\n    \"birthYear\": -56022245,\n    \"birthMonth\": 36605965,\n    \"birthDay\": -14220076,\n    \"firstName\": \"dolo\",\n    \"lastName\": \"et sed deserunt dolore nostrud\",\n    \"memberNumber\": \"sunt dolore\",\n    \"redeemableClubPoints\": -15705346.280198067,\n    \"customerCode\": \"cillum volup\",\n    \"gender\": \"UNKNOWN\",\n    \"nationality\": \"GH\"\n  },\n  \"passengerDetails\": [\n    {\n      \"contactInfo\": {\n        \"address\": \"aliquip in eu\",\n        \"city\": \"cupidatat exercitation est non esse\",\n        \"country\": \"HU\",\n        \"email\": \"Lorem qui exercitation\",\n        \"mobile\": \"ut\",\n        \"zip\": \"non ul\"\n      },\n      \"birthYear\": -3207884,\n      \"birthMonth\": 35160966,\n      \"birthDay\": -11778426,\n      \"firstName\": \"magna ea\",\n      \"lastName\": \"elit do aliquip amet\",\n      \"memberNumber\": \"laborum mollit cupidatat\",\n      \"redeemableClubPoints\": -5690907.667265102,\n      \"customerCode\": \"officia aliquip ut fugiat\",\n      \"gender\": \"UNKNOWN\",\n      \"nationality\": \"AT\",\n      \"disabledPerson\": false,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"elit consequat magna exercitation Duis\"\n      },\n      \"code\": \"CHILD\",\n      \"uuid\": \"ex eiusmod\",\n      \"bookedItemReference\": \"occaecat aliquip commodo incididunt aliqua\"\n    },\n    {\n      \"contactInfo\": {\n        \"address\": \"mollit aute incididunt cillum\",\n        \"city\": \"sed sint ad tempor\",\n        \"country\": \"AM\",\n        \"email\": \"adipisicing esse velit\",\n        \"mobile\": \"esse mollit labore sed\",\n        \"zip\": \"fugiat do officia dolore elit\"\n      },\n      \"birthYear\": 98294912,\n      \"birthMonth\": 28004253,\n      \"birthDay\": 7898555,\n      \"firstName\": \"nostrud eiusmod\",\n      \"lastName\": \"Excepteur id adipisicing ad mollit\",\n      \"memberNumber\": \"mollit exercitation deserunt id\",\n      \"redeemableClubPoints\": -16016028.931976795,\n      \"customerCode\": \"ullamco mollit et nulla\",\n      \"gender\": \"UNKNOWN\",\n      \"nationality\": \"JM\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"proident veniam dolore\"\n      },\n      \"code\": \"ADULT\",\n      \"uuid\": \"in est nisi sunt irure\",\n      \"bookedItemReference\": \"enim tempor\"\n    }\n  ],\n  \"outbound\": {\n    \"journeyCode\": \"ea nostrud ullamco in labore\",\n    \"arrivalPort\": \"SESMD\",\n    \"secondArrivalPort\": \"NOLAD\",\n    \"departureCode\": \"voluptate consectetur\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"NOBGO\",\n    \"departureDate\": \"2009-10-04T21:11:49.812Z\",\n    \"arrivalDate\": \"2009-10-28T03:18:22.741Z\",\n    \"ticket\": {\n      \"fareType\": \"FLEX\",\n      \"ticketCode\": \"do ut\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"BABY\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 94244445.84754145,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"ADULT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -51036609.818027005,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"fugiat Lorem\",\n        \"edit\": \"reprehend\",\n        \"id\": \"tempor enim ipsum nostrud\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 89776727.50215712,\n          \"available\": true\n        },\n        \"quantityInCabin\": -78681896,\n        \"subCode\": \"labore\",\n        \"bookedItemReference\": \"occaecat deserunt\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"amet non sed pariatur\",\n        \"edit\": \"adipisicing aute Duis ex laboris\",\n        \"id\": \"tempor quis anim\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 42404212.63044909,\n          \"available\": false\n        },\n        \"quantityInCabin\": -79535299,\n        \"subCode\": \"e\",\n        \"bookedItemReference\": \"velit eu deserunt sed incididunt\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"sed voluptate Excepteur\",\n        \"quantity\": -58048128,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 85574791.74113792,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"sunt do\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"proident Lorem\",\n        \"startTime\": \"1976-04-01T06:03:40.817Z\"\n      },\n      {\n        \"code\": \"aute dolor elit cillum\",\n        \"quantity\": 99565146,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 50605515.75024998,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"laboris aliquip amet \",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"adipisicing esse aute cillum in\",\n        \"startTime\": \"1956-06-12T07:47:24.014Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"ea consequat et magna\",\n        \"quantity\": -26912994,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 55794452.97644034,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nisi velit Lorem enim culpa\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"l\",\n        \"startTime\": \"1957-06-06T21:05:47.070Z\"\n      },\n      {\n        \"code\": \"Duis consequat ea cupidatat\",\n        \"quantity\": -77648252,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -41311889.46920586,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"fugiat sint labore minim\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Excepteur proident ut dolor\",\n        \"startTime\": \"2011-05-10T01:33:16.183Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"ut pariatur nostrud proident esse\",\n        \"quantity\": -84022664,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 34876483.471639246,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolor dolore consequat et\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"commodo dolor veniam\",\n        \"startTime\": \"1960-02-22T22:43:13.814Z\"\n      },\n      {\n        \"code\": \"labore\",\n        \"quantity\": 6438809,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 75843307.36681834,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"officia labore\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"dolore nulla\",\n        \"startTime\": \"1990-12-03T15:45:03.122Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"magna occaecat ut proident\",\n        \"quantity\": -14485570,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 36538485.46514058,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolore ad veniam enim\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"minim non\",\n        \"startTime\": \"1971-07-03T00:22:03.863Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"reprehenderit in\"\n      },\n      {\n        \"code\": \"ut eu dolore amet\",\n        \"quantity\": -44185594,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 8085932.729816437,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"amet et fugiat qui dolore\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"ipsum amet elit cu\",\n        \"startTime\": \"2023-04-09T18:28:48.250Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"pariatur \"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"incididunt\",\n        \"quantity\": 99900946,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -57775596.03812006,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"est pariatur eiusmod laboris\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"minim\",\n        \"length\": -8789132.078440517,\n        \"hasTrailer\": true,\n        \"id\": \"labore\"\n      },\n      {\n        \"code\": \"nostrud\",\n        \"quantity\": -22103989,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 71307619.64154118,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"dolor ipsum aliqua\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"proident nulla\",\n        \"length\": 97563448.47984853,\n        \"hasTrailer\": true,\n        \"id\": \"laboris enim non aliquip\"\n      }\n    ],\n    \"vesselCode\": \"eu\"\n  },\n  \"inbound\": {\n    \"journeyCode\": \"minim do sed commod\",\n    \"arrivalPort\": \"NOTRF\",\n    \"secondArrivalPort\": \"NOSVG\",\n    \"departureCode\": \"nostrud Excepteur\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"DKHIR\",\n    \"departureDate\": \"1977-12-14T03:53:24.289Z\",\n    \"arrivalDate\": \"2022-10-03T13:36:55.693Z\",\n    \"ticket\": {\n      \"fareType\": \"FJORDCLUB\",\n      \"ticketCode\": \"deserunt tempor\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 2407549.6543863267,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"ADULT\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -1783124.1021587253,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"id aliquip do dolor\",\n        \"edit\": \"Duis eiusmod incididunt\",\n        \"id\": \"qui\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 40330577.84562594,\n          \"available\": false\n        },\n        \"quantityInCabin\": 50907516,\n        \"subCode\": \"fugiat adipisicing dolor\",\n        \"bookedItemReference\": \"sunt laboris\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"ad esse\",\n        \"edit\": \"aliqua sit\",\n        \"id\": \"dolore\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -61542658.360934466,\n          \"available\": true\n        },\n        \"quantityInCabin\": -60162891,\n        \"subCode\": \"dolore\",\n        \"bookedItemReference\": \"labore voluptate\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"commodo consectetur pariatur\",\n        \"quantity\": 20423192,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 31363803.21920508,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"dolore culpa Excepteur\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"do\",\n        \"startTime\": \"2008-09-14T23:25:15.293Z\"\n      },\n      {\n        \"code\": \"ea Ut do nulla\",\n        \"quantity\": 60241519,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -39641740.28380003,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ad consequat aute\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"minim pariatur adipisicing consequat\",\n        \"startTime\": \"1953-07-01T13:15:20.300Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"amet commodo\",\n        \"quantity\": 59252965,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -59336459.97967076,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"Duis id adipisicing in\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"minim nisi nostrud dolore\",\n        \"startTime\": \"2007-09-08T18:12:10.127Z\"\n      },\n      {\n        \"code\": \"laboris labore incididunt voluptate\",\n        \"quantity\": -56581584,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -99827269.89100742,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"cillum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"sint nisi\",\n        \"startTime\": \"2017-08-15T01:30:09.314Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"amet\",\n        \"quantity\": -26784987,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 66801249.91029763,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"commodo mollit\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"anim\",\n        \"startTime\": \"1981-10-22T10:30:10.046Z\"\n      },\n      {\n        \"code\": \"ipsum mollit sed\",\n        \"quantity\": 34035320,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 5256652.133483142,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"incididunt elit ad minim adipisicing\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"laboris ut\",\n        \"startTime\": \"2016-11-07T01:02:58.067Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"esse aliqua\",\n        \"quantity\": -90444968,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 72121369.25041914,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"nostrud magna officia velit\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"qui\",\n        \"startTime\": \"1956-07-29T10:02:41.183Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"nulla est quis proident in\"\n      },\n      {\n        \"code\": \"reprehenderi\",\n        \"quantity\": -55935507,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -1463000.032648012,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"veniam tempor ut\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"cupidat\",\n        \"startTime\": \"2022-10-27T03:05:39.912Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"eu ad\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"do Duis pariatur\",\n        \"quantity\": 35521189,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 50483534.14423406,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"do\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"eiusmod commodo dolor occaecat ullamco\",\n        \"length\": -50688421.103195444,\n        \"hasTrailer\": true,\n        \"id\": \"laborum esse dolore proident\"\n      },\n      {\n        \"code\": \"consequat ullamco\",\n        \"quantity\": -26661972,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -5684809.919626638,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"enim magna dolore deserunt\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"sed enim\",\n        \"length\": 99129325.56693804,\n        \"hasTrailer\": true,\n        \"id\": \"in magna sunt laboris qui\"\n      }\n    ],\n    \"vesselCode\": \"Ut proident pariatur ut sunt\"\n  },\n  \"hasVehicle\": true,\n  \"hasPet\": true,\n  \"agencyId\": \"labore sed dolor\",\n  \"userId\": \"est culpa Lorem voluptate s\",\n  \"connectionId\": \"exercitation Duis\",\n  \"status\": \"DELETED\",\n  \"bookingResult\": {\n    \"created\": \"2016-02-24T22:34:09.325Z\",\n    \"bookingCode\": \"id magna\",\n    \"bookingState\": \"ad culpa\",\n    \"bookingBalance\": \"ut culpa ullamco Ut reprehenderit\",\n    \"bookingTotal\": \"dolore dolor\",\n    \"paidState\": \"et amet consequat anim labore\",\n    \"currency\": \"conse\",\n    \"paymentUrl\": \"cupidatat in nostrud fugiat enim\",\n    \"paymentSessionId\": \"nisi id sunt Ut\",\n    \"bookedItems\": {\n      \"groupPrices\": [\n        {\n          \"name\": \"ea irure aute\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"name\": \"voluptate labore\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundPassengerPrices\": [\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"BABY\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"inboundPassengerPrices\": [\n        {\n          \"code\": \"BABY\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"ADULT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundVehicles\": [\n        {\n          \"code\": \"eiusmod pariatur laboris sunt\",\n          \"quantity\": 29117862,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"qui et elit laboris\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"elit sunt in\",\n          \"length\": 84079792.35291564,\n          \"hasTrailer\": false,\n          \"id\": \"amet ex\"\n        },\n        {\n          \"code\": \"sit officia\",\n          \"quantity\": 5394261,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Ut mollit quis mag\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"qui\",\n          \"length\": 8797154.481068864,\n          \"hasTrailer\": true,\n          \"id\": \"veniam do\"\n        }\n      ],\n      \"inboundVehicles\": [\n        {\n          \"code\": \"velit quis\",\n          \"quantity\": 3564079,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"laboris dolor voluptate dolore\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"et eu amet ea\",\n          \"length\": -72307328.16589254,\n          \"hasTrailer\": true,\n          \"id\": \"est officia Excepteur et minim\"\n        },\n        {\n          \"code\": \"qui anim elit dolore incididunt\",\n          \"quantity\": -37015207,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"officia voluptate irure\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"deserunt Excepteur\",\n          \"length\": -22859770.727964252,\n          \"hasTrailer\": false,\n          \"id\": \"id nulla ea in\"\n        }\n      ],\n      \"outboundMeals\": [\n        {\n          \"code\": \"nostrud ea laboris ex nisi\",\n          \"quantity\": -48559035,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sunt officia sit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"cillum proident\",\n          \"startTime\": \"1956-06-15T20:07:25.476Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"cupidatat\"\n        },\n        {\n          \"code\": \"deserunt\",\n          \"quantity\": -34516915,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ad\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"tempor Excepteu\",\n          \"startTime\": \"1971-06-24T05:08:58.715Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"nisi\"\n        }\n      ],\n      \"inboundMeals\": [\n        {\n          \"code\": \"cupidatat Duis eiusmod laborum\",\n          \"quantity\": -89759174,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"voluptate\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"adipisicing qui Duis Excepteur occaecat\",\n          \"startTime\": \"1974-09-10T02:18:03.225Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"do cupidatat consectetur Duis\"\n        },\n        {\n          \"code\": \"reprehenderit dolore cupidatat\",\n          \"quantity\": 71811109,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ipsum dol\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"veniam magna elit dolore\",\n          \"startTime\": \"1958-02-03T10:13:01.978Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"ut Excepteur\"\n        }\n      ],\n      \"outboundCabins\": [\n        {\n          \"code\": \"sed dolor ut\",\n          \"edit\": \"veniam \",\n          \"id\": \"reprehenderit aute nulla\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -315324,\n          \"subCode\": \"commodo ut\",\n          \"bookedItemReference\": \"eu consequat laborum nulla\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"dolor\",\n          \"edit\": \"i\",\n          \"id\": \"i\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 83701879,\n          \"subCode\": \"do anim\",\n          \"bookedItemReference\": \"amet\",\n          \"isAttachment\": true\n        }\n      ],\n      \"inboundCabins\": [\n        {\n          \"code\": \"irure proident laboris reprehenderit\",\n          \"edit\": \"aliquip fugiat aliqua\",\n          \"id\": \"eu\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 88836997,\n          \"subCode\": \"non Lorem ullamco\",\n          \"bookedItemReference\": \"ut nulla Lorem ad\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"adipisicing nostrud\",\n          \"edit\": \"fugiat ut pariatur\",\n          \"id\": \"irure cillum ex\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -58350540,\n          \"subCode\": \"in\",\n          \"bookedItemReference\": \"occaecat commodo et consectetur laborum\",\n          \"isAttachment\": true\n        }\n      ],\n      \"outboundExtras\": [\n        {\n          \"code\": \"d\",\n          \"quantity\": -75093385,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"amet ullamco eu ad\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"Duis elit velit\",\n          \"startTime\": \"1992-08-10T23:56:58.236Z\"\n        },\n        {\n          \"code\": \"ea\",\n          \"quantity\": 32006496,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"dolor laborum sunt\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"non\",\n          \"startTime\": \"2016-02-21T14:06:30.439Z\"\n        }\n      ],\n      \"inboundExtras\": [\n        {\n          \"code\": \"minim Duis reprehenderit eiusmod sunt\",\n          \"quantity\": 80988587,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ullamco \",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"qui\",\n          \"startTime\": \"1959-01-02T15:14:26.233Z\"\n        },\n        {\n          \"code\": \"sit reprehenderit non\",\n          \"quantity\": -80683654,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Ut aliqua officia velit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"dolore ex commo\",\n          \"startTime\": \"2021-05-13T01:50:56.223Z\"\n        }\n      ],\n      \"outboundDiscounts\": [\n        {\n          \"code\": \"ea magna consequat\",\n          \"quantity\": 2607323,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"deserunt exercitation non nisi\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"voluptate veniam exercitation\",\n          \"quantity\": 95305827,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla tempor\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        }\n      ],\n      \"inboundDiscounts\": [\n        {\n          \"code\": \"deserunt commodo\",\n          \"quantity\": -89315342,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"sunt \",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"dolor\",\n          \"quantity\": 37449785,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Duis sunt\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true\n        }\n      ]\n    }\n  },\n  \"timestamp\": 55944224,\n  \"packageCode\": \"aliquip ea irure\",\n  \"referralCode\": \"sit tempor\",\n  \"voucherCode\": \"mollit\",\n  \"ticketBookCode\": \"voluptate do\",\n  \"ticketBookPassword\": \"deserunt occae\",\n  \"accommodations\": [\n    {\n      \"code\": \"non ea incididunt \",\n      \"name\": \"minim sed enim aliquip\",\n      \"checkinDate\": \"1998-10-12T14:31:41.005Z\",\n      \"checkoutDate\": \"1975-07-15T22:19:43.653Z\",\n      \"rooms\": [\n        {\n          \"name\": \"exercitation e\",\n          \"code\": \"magna sunt\",\n          \"quantity\": 82105969,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -99739269.11586961,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"nisi velit\",\n          \"code\": \"sint elit reprehenderit\",\n          \"quantity\": -62514143,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -76980930.9644017,\n            \"available\": false\n          }\n        }\n      ]\n    },\n    {\n      \"code\": \"nostrud sint ad aute\",\n      \"name\": \"non anim voluptate qui\",\n      \"checkinDate\": \"1954-06-12T16:06:41.363Z\",\n      \"checkoutDate\": \"2022-11-17T18:33:23.525Z\",\n      \"rooms\": [\n        {\n          \"name\": \"culpa aute\",\n          \"code\": \"nulla\",\n          \"quantity\": -92651760,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 7622487.9307076335,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"fugiat consequat magna\",\n          \"code\": \"consequat elit do Lorem cu\",\n          \"quantity\": 79046587,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -22116844.220564052,\n            \"available\": true\n          }\n        }\n      ]\n    }\n  ],\n  \"showOnlyTotalPrice\": true,\n  \"paymentMethod\": \"TICKET_BOOK\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "fad02780-ed53-47fb-ae32-687e01438112",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "62d705fe-bdd6-4a9e-a9e9-8384289aea50",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "84357f4b-d725-47f9-87a8-a779c05376a5",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "153213e4-ddd7-4fba-90f9-6d20e6a70111",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\n\n// Test generated for /delete-cart/:id for http method type put in postman framework\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n\n      pm.test('Response has the `language` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"language\")){\n          if(responseData.language!=null){\n            pm.expect(typeof _.get(responseData, \"language\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"currency\")){\n          if(responseData.currency!=null){\n            pm.expect(typeof _.get(responseData, \"currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price\")){\n          if(responseData.price!=null){\n            pm.expect(typeof _.get(responseData, \"price\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.currency\")){\n          if(responseData.price.currency!=null){\n            pm.expect(typeof _.get(responseData, \"price.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"price.currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price.value` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.value\")){\n          if(responseData.price.value!=null){\n            pm.expect(typeof _.get(responseData, \"price.value\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.available` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.available\")){\n          if(responseData.price.available!=null){\n            pm.expect(typeof _.get(responseData, \"price.available\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `journeyType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"journeyType\")){\n          if(responseData.journeyType!=null){\n            pm.expect(typeof _.get(responseData, \"journeyType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"journeyType\", \"\")).to.be.oneOf(ONEWAY,RETURN,CRUISE,PACKAGE);\n      \n        pm.test('Response has the `passengers` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengers\")){\n            if(responseData.passengers!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengers\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengers` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengers\");  \n          let passengersArray = _.get(pm.response.json(), \"passengers\", \"\");  \n          for (let i = 0; i < passengersArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengers' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengers[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengers\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n        pm.test(`${i} element of array 'passengers' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().passengers[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `contactPerson` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson\")){\n          if(responseData.contactPerson!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo\")){\n          if(responseData.contactPerson.contactInfo!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.address` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.address\")){\n          if(responseData.contactPerson.contactInfo.address!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.address\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.city` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.city\")){\n          if(responseData.contactPerson.contactInfo.city!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.city\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.country` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.country\")){\n          if(responseData.contactPerson.contactInfo.country!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.country\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.contactInfo.country\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test('Response has the `contactPerson.contactInfo.email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.email\")){\n          if(responseData.contactPerson.contactInfo.email!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.mobile` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.mobile\")){\n          if(responseData.contactPerson.contactInfo.mobile!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.mobile\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.zip` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.zip\")){\n          if(responseData.contactPerson.contactInfo.zip!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.zip\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `contactPerson.birthYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthYear\")){\n            if(responseData.contactPerson.birthYear!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthMonth` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthMonth\")){\n            if(responseData.contactPerson.birthMonth!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthMonth\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthDay` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthDay\")){\n            if(responseData.contactPerson.birthDay!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthDay\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `contactPerson.firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.firstName\")){\n          if(responseData.contactPerson.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.lastName\")){\n          if(responseData.contactPerson.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.memberNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.memberNumber\")){\n          if(responseData.contactPerson.memberNumber!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.memberNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.redeemableClubPoints` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.redeemableClubPoints\")){\n          if(responseData.contactPerson.redeemableClubPoints!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.redeemableClubPoints\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.customerCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.customerCode\")){\n          if(responseData.contactPerson.customerCode!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.customerCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.gender\")){\n          if(responseData.contactPerson.gender!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.gender\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test('Response has the `contactPerson.nationality` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.nationality\")){\n          if(responseData.contactPerson.nationality!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.nationality\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.nationality\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n      \n        pm.test('Response has the `passengerDetails` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengerDetails\")){\n            if(responseData.passengerDetails!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengerDetails\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengerDetails` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengerDetails\");  \n          let passengerDetailsArray = _.get(pm.response.json(), \"passengerDetails\", \"\");  \n          for (let i = 0; i < passengerDetailsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengerDetails' has 'contactInfo' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"contactInfo\")){\n          if(pm.response.json().passengerDetails[i].contactInfo != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].contactInfo`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthYear' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthYear\")){\n            if(pm.response.json().passengerDetails[i].birthYear != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthYear`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthMonth' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthMonth\")){\n            if(pm.response.json().passengerDetails[i].birthMonth != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthMonth`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthDay' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthDay\")){\n            if(pm.response.json().passengerDetails[i].birthDay != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthDay`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'passengerDetails' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().passengerDetails[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().passengerDetails[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'memberNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"memberNumber\")){\n          if(pm.response.json().passengerDetails[i].memberNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].memberNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'redeemableClubPoints' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"redeemableClubPoints\")){\n          if(pm.response.json().passengerDetails[i].redeemableClubPoints != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].redeemableClubPoints`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'customerCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"customerCode\")){\n          if(pm.response.json().passengerDetails[i].customerCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].customerCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"gender\")){\n          if(pm.response.json().passengerDetails[i].gender != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].gender`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'nationality' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"nationality\")){\n          if(pm.response.json().passengerDetails[i].nationality != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].nationality`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'disabledPerson' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"disabledPerson\")){\n          if(pm.response.json().passengerDetails[i].disabledPerson != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].disabledPerson`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'id' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().passengerDetails[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].id`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengerDetails[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'uuid' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"uuid\")){\n          if(pm.response.json().passengerDetails[i].uuid != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].uuid`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().passengerDetails[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound\")){\n          if(responseData.outbound!=null){\n            pm.expect(typeof _.get(responseData, \"outbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.journeyCode\")){\n          if(responseData.outbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalPort\")){\n          if(responseData.outbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondArrivalPort\")){\n          if(responseData.outbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureCode\")){\n          if(responseData.outbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departurePort\")){\n          if(responseData.outbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondDeparturePort\")){\n          if(responseData.outbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureDate\")){\n          if(responseData.outbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.departureDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `outbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalDate\")){\n          if(responseData.outbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.arrivalDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `outbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket\")){\n          if(responseData.outbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.fareType\")){\n          if(responseData.outbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `outbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.ticketCode\")){\n          if(responseData.outbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `outbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.passengerPrices\")){\n            if(responseData.outbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"outbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.cabins\")){\n            if(responseData.outbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"outbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().outbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().outbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshore\")){\n            if(responseData.outbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"outbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasAshore\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshoreWithOptions\")){\n            if(responseData.outbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasOnboard\")){\n            if(responseData.outbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"outbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.extrasOnboard\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.meals\")){\n            if(responseData.outbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"outbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"outbound.meals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'outbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().outbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().outbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.vehicles\")){\n            if(responseData.outbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"outbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().outbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().outbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().outbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.vesselCode\")){\n          if(responseData.outbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound\")){\n          if(responseData.inbound!=null){\n            pm.expect(typeof _.get(responseData, \"inbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.journeyCode\")){\n          if(responseData.inbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalPort\")){\n          if(responseData.inbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondArrivalPort\")){\n          if(responseData.inbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureCode\")){\n          if(responseData.inbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departurePort\")){\n          if(responseData.inbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondDeparturePort\")){\n          if(responseData.inbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureDate\")){\n          if(responseData.inbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.departureDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `inbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalDate\")){\n          if(responseData.inbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.arrivalDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `inbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket\")){\n          if(responseData.inbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.fareType\")){\n          if(responseData.inbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `inbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.ticketCode\")){\n          if(responseData.inbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `inbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.passengerPrices\")){\n            if(responseData.inbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"inbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.cabins\")){\n            if(responseData.inbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"inbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().inbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().inbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshore\")){\n            if(responseData.inbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"inbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasAshore\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshoreWithOptions\")){\n            if(responseData.inbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasOnboard\")){\n            if(responseData.inbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"inbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.extrasOnboard\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.meals\")){\n            if(responseData.inbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"inbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"inbound.meals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'inbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().inbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().inbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.vehicles\")){\n            if(responseData.inbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"inbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().inbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().inbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().inbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `inbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.vesselCode\")){\n          if(responseData.inbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasVehicle` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasVehicle\")){\n          if(responseData.hasVehicle!=null){\n            pm.expect(typeof _.get(responseData, \"hasVehicle\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasPet` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasPet\")){\n          if(responseData.hasPet!=null){\n            pm.expect(typeof _.get(responseData, \"hasPet\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `agencyId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"agencyId\")){\n          if(responseData.agencyId!=null){\n            pm.expect(typeof _.get(responseData, \"agencyId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `userId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"userId\")){\n          if(responseData.userId!=null){\n            pm.expect(typeof _.get(responseData, \"userId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `connectionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"connectionId\")){\n          if(responseData.connectionId!=null){\n            pm.expect(typeof _.get(responseData, \"connectionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf(ACTIVE,BOOKED,DELETED,EXPIRED,BOOKING_IN_PROGRESS);\n\n      pm.test('Response has the `bookingResult` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult\")){\n          if(responseData.bookingResult!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.created` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.created\")){\n          if(responseData.bookingResult.created!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.created\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.created\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test('Response has the `bookingResult.bookingCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingCode\")){\n          if(responseData.bookingResult.bookingCode!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingState\")){\n          if(responseData.bookingResult.bookingState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingBalance` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingBalance\")){\n          if(responseData.bookingResult.bookingBalance!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingBalance\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingTotal` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingTotal\")){\n          if(responseData.bookingResult.bookingTotal!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingTotal\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paidState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paidState\")){\n          if(responseData.bookingResult.paidState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paidState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.currency\")){\n          if(responseData.bookingResult.currency!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentUrl\")){\n          if(responseData.bookingResult.paymentUrl!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentSessionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentSessionId\")){\n          if(responseData.bookingResult.paymentSessionId!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentSessionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookedItems` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems\")){\n          if(responseData.bookingResult.bookedItems!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookedItems\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `bookingResult.bookedItems.groupPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\")){\n            if(responseData.bookingResult.bookedItems.groupPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.groupPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\");  \n          let groupPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\", \"\");  \n          for (let i = 0; i < groupPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.outboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\");  \n          let outboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\");  \n          for (let i = 0; i < outboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.inboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\");  \n          let inboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\");  \n          for (let i = 0; i < inboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.outboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\");  \n          let outboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\", \"\");  \n          for (let i = 0; i < outboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.inboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\");  \n          let inboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\", \"\");  \n          for (let i = 0; i < inboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\")){\n            if(responseData.bookingResult.bookedItems.outboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\");  \n          let outboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\");  \n          for (let i = 0; i < outboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\")){\n            if(responseData.bookingResult.bookedItems.inboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\");  \n          let inboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\");  \n          for (let i = 0; i < inboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\")){\n            if(responseData.bookingResult.bookedItems.outboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\");  \n          let outboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\", \"\");  \n          for (let i = 0; i < outboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\")){\n            if(responseData.bookingResult.bookedItems.inboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\");  \n          let inboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\", \"\");  \n          for (let i = 0; i < inboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\")){\n            if(responseData.bookingResult.bookedItems.outboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\");  \n          let outboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\");  \n          for (let i = 0; i < outboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\")){\n            if(responseData.bookingResult.bookedItems.inboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\");  \n          let inboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\");  \n          for (let i = 0; i < inboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.outboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\");  \n          let outboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\", \"\");  \n          for (let i = 0; i < outboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.inboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\");  \n          let inboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\", \"\");  \n          for (let i = 0; i < inboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n        pm.test('Response has the `timestamp` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"timestamp\")){\n            if(responseData.timestamp!=null){\n              pm.expect(typeof _.get(responseData, \"timestamp\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `packageCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"packageCode\")){\n          if(responseData.packageCode!=null){\n            pm.expect(typeof _.get(responseData, \"packageCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `referralCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"referralCode\")){\n          if(responseData.referralCode!=null){\n            pm.expect(typeof _.get(responseData, \"referralCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `voucherCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"voucherCode\")){\n          if(responseData.voucherCode!=null){\n            pm.expect(typeof _.get(responseData, \"voucherCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookCode\")){\n          if(responseData.ticketBookCode!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookPassword` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookPassword\")){\n          if(responseData.ticketBookPassword!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookPassword\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `accommodations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"accommodations\")){\n            if(responseData.accommodations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"accommodations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `accommodations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"accommodations\");  \n          let accommodationsArray = _.get(pm.response.json(), \"accommodations\", \"\");  \n          for (let i = 0; i < accommodationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'accommodations' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().accommodations[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().accommodations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkinDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkinDate\")){\n          if(pm.response.json().accommodations[i].checkinDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkinDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"accommodations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n      pm.test(`${i} element of array 'accommodations' has 'checkoutDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkoutDate\")){\n          if(pm.response.json().accommodations[i].checkoutDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkoutDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n                pm.expect(_.get(pm.response.json(), \"accommodations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n\n        pm.test(`${i} element of array 'accommodations' has 'rooms' as an array`,function(){ \n          if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"rooms\")){\n            if(pm.response.json().accommodations[i].rooms != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `accommodations[${i}].rooms`))).to.equal(true);\n            }\n          }\n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `showOnlyTotalPrice` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"showOnlyTotalPrice\")){\n          if(responseData.showOnlyTotalPrice!=null){\n            pm.expect(typeof _.get(responseData, \"showOnlyTotalPrice\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `paymentMethod` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"paymentMethod\")){\n          if(responseData.paymentMethod!=null){\n            pm.expect(typeof _.get(responseData, \"paymentMethod\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"paymentMethod\", \"\")).to.be.oneOf(CREDIT_CARD,VOUCHER,CLUB_POINTS,TICKET_BOOK);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "Authorization"
      },
      {
        "key": "value",
        "value": "{{apiKey}}"
      },
      {
        "key": "in",
        "value": "header"
      }
    ]
  },
  "info": {
    "_postman_id": "7dd82af6-e158-422b-8485-2e6c41d31f73",
    "name": "fl-cart-v1",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}